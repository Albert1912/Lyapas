********************************************************************
*** syntax rules handler
*** L1 - metadata
*** F2 - function names
*** L3 - input args
*** L4 - output args
*** F5 - variables
*** L6 - complexes
*** F7 - byte-code
*** i - applied rule index
********************************************************************
handle_applied_rule(L1,F2,L3,L4,F5,L6,F7,i/)
§0 ↑(i≠0)1 *handle_rule_0(L1,F2,L3,L4,F5,L6,L7/)→66
§1 ↑(i≠1)2 *handle_rule_1(L1,F2,L3,L4,F5,L6,L7/)→66
§2 ↑(i≠2)3 *handle_rule_2(L1,F2,L3,L4,F5,L6,L7/)→66
§3 ↑(i≠3)4 *handle_rule_3(L1,F2,L3,L4,F5,L6,L7/)→66
§4 ↑(i≠4)5 *handle_rule_4(L1,F2,L3,L4,F5,L6,L7/)→66
§5 ↑(i≠5)6 *handle_rule_5(L1,F2,L3,L4,F5,L6,L7/)→66
§6 ↑(i≠6)7 *handle_rule_6(L1,F2,L3,L4,F5,L6,L7/)→66
§7 ↑(i≠7)8 *handle_rule_7(L1,F2,L3,L4,F5,L6,L7/)→66
§8 ↑(i≠8)9 *handle_rule_8(L1,F2,L3,L4,F5,L6,L7/)→66
§9 ↑(i≠9)10 *handle_rule_9(L1,F2,L3,L4,F5,L6,L7/)→66
§10 ↑(i≠10)11 *handle_rule_10(L1,F2,L3,L4,F5,L6,L7/)→66
§11 ↑(i≠11)12 *handle_rule_11(L1,F2,L3,L4,F5,L6,L7/)→66
§12 ↑(i≠12)13 *handle_rule_12(L1,F2,L3,L4,F5,L6,L7/)→66
§13 ↑(i≠13)14 *handle_rule_13(L1,F2,L3,L4,F5,L6,L7/)→66
§14 ↑(i≠14)15 *handle_rule_14(L1,F2,L3,L4,F5,L6,L7/)→66
§15 ↑(i≠15)16 *handle_rule_15(L1,F2,L3,L4,F5,L6,L7/)→66
§16 ↑(i≠16)17 *handle_rule_16(L1,F2,L3,L4,F5,L6,L7/)→66
§17 ↑(i≠17)18 *handle_rule_17(L1,F2,L3,L4,F5,L6,L7/)→66
§18 ↑(i≠18)19 *handle_rule_18(L1,F2,L3,L4,F5,L6,L7/)→66
§19 ↑(i≠19)20 *handle_rule_19(L1,F2,L3,L4,F5,L6,L7/)→66
§20 ↑(i≠20)21 *handle_rule_20(L1,F2,L3,L4,F5,L6,L7/)→66
§21 ↑(i≠21)22 *handle_rule_21(L1,F2,L3,L4,F5,L6,L7/)→66
§22 ↑(i≠22)23 *handle_rule_22(L1,F2,L3,L4,F5,L6,L7/)→66
§23 ↑(i≠23)24 *handle_rule_23(L1,F2,L3,L4,F5,L6,L7/)→66
§24 ↑(i≠24)25 *handle_rule_24(L1,F2,L3,L4,F5,L6,L7/)→66
§25 ↑(i≠25)26 *handle_rule_25(L1,F2,L3,L4,F5,L6,L7/)→66
§26 ↑(i≠26)27 *handle_rule_26(L1,F2,L3,L4,F5,L6,L7/)→66
§27 ↑(i≠27)28 *handle_rule_27(L1,F2,L3,L4,F5,L6,L7/)→66
§28 ↑(i≠28)29 *handle_rule_28(L1,F2,L3,L4,F5,L6,L7/)→66
§29 ↑(i≠29)30 *handle_rule_29(L1,F2,L3,L4,F5,L6,L7/)→66
§30 ↑(i≠30)31 *handle_rule_30(L1,F2,L3,L4,F5,L6,L7/)→66
§31 ↑(i≠31)32 *handle_rule_31(L1,F2,L3,L4,F5,L6,L7/)→66
§32 ↑(i≠32)33 *handle_rule_32(L1,F2,L3,L4,F5,L6,L7/)→66
§33 ↑(i≠33)34 *handle_rule_33(L1,F2,L3,L4,F5,L6,L7/)→66
§34 ↑(i≠34)35 *handle_rule_34(L1,F2,L3,L4,F5,L6,L7/)→66
§35 ↑(i≠35)36 *handle_rule_35(L1,F2,L3,L4,F5,L6,L7/)→66
§36 ↑(i≠36)37 *handle_rule_36(L1,F2,L3,L4,F5,L6,L7/)→66
§37 ↑(i≠37)38 *handle_rule_37(L1,F2,L3,L4,F5,L6,L7/)→66
§38 ↑(i≠38)39 *handle_rule_38(L1,F2,L3,L4,F5,L6,L7/)→66
§39 ↑(i≠39)40 *handle_rule_39(L1,F2,L3,L4,F5,L6,L7/)→66
§40 ↑(i≠40)41 *handle_rule_40(L1,F2,L3,L4,F5,L6,L7/)→66
§41 ↑(i≠41)42 *handle_rule_41(L1,F2,L3,L4,F5,L6,L7/)→66
§42 ↑(i≠42)43 *handle_rule_42(L1,F2,L3,L4,F5,L6,L7/)→66
§43 ↑(i≠43)44 *handle_rule_43(L1,F2,L3,L4,F5,L6,L7/)→66
§44 ↑(i≠44)45 *handle_rule_44(L1,F2,L3,L4,F5,L6,L7/)→66
§45 ↑(i≠45)46 *handle_rule_45(L1,F2,L3,L4,F5,L6,L7/)→66
§46 ↑(i≠46)47 *handle_rule_46(L1,F2,L3,L4,F5,L6,L7/)→66
§47 ↑(i≠47)48 *handle_rule_47(L1,F2,L3,L4,F5,L6,L7/)→66
§48 ↑(i≠48)49 *handle_rule_48(L1,F2,L3,L4,F5,L6,L7/)→66
§49 ↑(i≠49)50 *handle_rule_49(L1,F2,L3,L4,F5,L6,L7/)→66
§50 ↑(i≠50)51 *handle_rule_50(L1,F2,L3,L4,F5,L6,L7/)→66
§51 ↑(i≠51)52 *handle_rule_51(L1,F2,L3,L4,F5,L6,L7/)→66
§52 ↑(i≠52)53 *handle_rule_52(L1,F2,L3,L4,F5,L6,L7/)→66
§53 ↑(i≠53)54 *handle_rule_53(L1,F2,L3,L4,F5,L6,L7/)→66
§54 ↑(i≠54)55 *handle_rule_54(L1,F2,L3,L4,F5,L6,L7/)→66
§55 ↑(i≠55)56 *handle_rule_55(L1,F2,L3,L4,F5,L6,L7/)→66
§56 ↑(i≠56)57 *handle_rule_56(L1,F2,L3,L4,F5,L6,L7/)→66
§57 ↑(i≠57)58 *handle_rule_57(L1,F2,L3,L4,F5,L6,L7/)→66
§58 ↑(i≠58)59 *handle_rule_58(L1,F2,L3,L4,F5,L6,L7/)→66
§59 ↑(i≠59)60 *handle_rule_59(L1,F2,L3,L4,F5,L6,L7/)→66
§60 ↑(i≠60)61 *handle_rule_60(L1,F2,L3,L4,F5,L6,L7/)→66
§61 ↑(i≠61)62 *handle_rule_61(L1,F2,L3,L4,F5,L6,L7/)→66
§62 ↑(i≠62)63 *handle_rule_62(L1,F2,L3,L4,F5,L6,L7/)→66
§63 ↑(i≠63)64 *handle_rule_63(L1,F2,L3,L4,F5,L6,L7/)→66
§64 ↑(i≠64)65 *handle_rule_64(L1,F2,L3,L4,F5,L6,L7/)→66
§65 ↑(i≠65)66 *handle_rule_65(L1,F2,L3,L4,F5,L6,L7/)→66
§66

**
********************************************************************
*** syntax rules handler
*** L1 - metadata
*** F2 - function names
*** L3 - input args
*** L4 - output args
*** F5 - variables
*** L6 - complexes
*** F7 - byte-code
*** F8 - token array
*** L9 - token array metadata
*** i - accepted terminal index
********************************************************************
handle_accepted_terminal(L1,F2,L3,L4,F5,L6,F7,F8,L9,i/)
**
handle_rule_0(L1,F2,L3,L4,F5,L6,L7/) *** SUBPROGRAM -> HEAD BODY ** SUBPROGRAM
**
handle_rule_1(L1,F2,L3,L4,F5,L6,L7/) *** SUBPROGRAM -> ε
**
handle_rule_2(L1,F2,L3,L4,F5,L6,L7/) *** HEAD -> name ( INARGS / OUTARGS )
**
handle_rule_3(L1,F2,L3,L4,F5,L6,L7/) *** INARGS -> INARG INARGS
**
handle_rule_4(L1,F2,L3,L4,F5,L6,L7/) *** INARGS -> , INARGS
**
handle_rule_5(L1,F2,L3,L4,F5,L6,L7/) *** INARGS -> ε
**
handle_rule_6(L1,F2,L3,L4,F5,L6,L7/) *** INARG -> id
**
handle_rule_7(L1,F2,L3,L4,F5,L6,L7/) *** INARG -> complex
**
handle_rule_8(L1,F2,L3,L4,F5,L6,L7/) *** OUTARGS -> OUTARG OUTARGS
**
handle_rule_9(L1,F2,L3,L4,F5,L6,L7/) *** OUTARGS -> , OUTARGS
**
handle_rule_10(L1,F2,L3,L4,F5,L6,L7/) *** OUTARGS -> ε
**
handle_rule_11(L1,F2,L3,L4,F5,L6,L7/) *** OUTARG -> id
**
handle_rule_12(L1,F2,L3,L4,F5,L6,L7/) *** OUTARG -> complex
**
handle_rule_13(L1,F2,L3,L4,F5,L6,L7/) *** BODY -> EXPR
**
handle_rule_14(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> * name ( CALLINARGS / CALLOUTARGS ) EXPR
**
handle_rule_15(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> OPERAND OPERANDEXPR EXPR
**
handle_rule_16(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> par const EXPR
**
handle_rule_17(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> jump const EXPR
**
handle_rule_18(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> cmp ( CONDITIONEXPR ) const EXPR
**
handle_rule_19(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> / CONSOLEACTION EXPR
**
handle_rule_20(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> at + complex ( const ) EXPR
**
handle_rule_21(L1,F2,L3,L4,F5,L6,L7/) *** EXPR -> ε
**
handle_rule_22(L1,F2,L3,L4,F5,L6,L7/) *** CONSOLEACTION -> console write complex
**
handle_rule_23(L1,F2,L3,L4,F5,L6,L7/) *** CONSOLEACTION -> complex read console
**
handle_rule_24(L1,F2,L3,L4,F5,L6,L7/) *** JUMPOP -> jz
**
handle_rule_25(L1,F2,L3,L4,F5,L6,L7/) *** JUMPOP -> jnz
**
handle_rule_26(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONEXPR -> OPERAND CONDITIONOP OPERAND
**
handle_rule_27(L1,F2,L3,L4,F5,L6,L7/) *** OPERANDEXPR -> ARITHMETICEXPR assign ASSIGNABLEOPERAND
**
handle_rule_28(L1,F2,L3,L4,F5,L6,L7/) *** OPERANDEXPR -> JUMPOP const
**
handle_rule_29(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICEXPR -> ARITHMETICOP OPERAND ARITHMETICEXPR
**
handle_rule_30(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICEXPR -> ε
**
handle_rule_31(L1,F2,L3,L4,F5,L6,L7/) *** INDEX -> . const
**
handle_rule_32(L1,F2,L3,L4,F5,L6,L7/) *** INDEX -> id
**
handle_rule_33(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> +
**
handle_rule_34(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> -
**
handle_rule_35(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> *
**
handle_rule_36(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> /
**
handle_rule_37(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> and
**
handle_rule_38(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> or
**
handle_rule_39(L1,F2,L3,L4,F5,L6,L7/) *** ARITHMETICOP -> xor
**
handle_rule_40(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONOP -> e
**
handle_rule_41(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONOP -> ne
**
handle_rule_42(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONOP -> g
**
handle_rule_43(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONOP -> ge
**
handle_rule_44(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONOP -> l
**
handle_rule_45(L1,F2,L3,L4,F5,L6,L7/) *** CONDITIONOP -> le
**
handle_rule_46(L1,F2,L3,L4,F5,L6,L7/) *** OPERAND -> id
**
handle_rule_47(L1,F2,L3,L4,F5,L6,L7/) *** OPERAND -> const
**
handle_rule_48(L1,F2,L3,L4,F5,L6,L7/) *** OPERAND -> complex INDEX
**
handle_rule_49(L1,F2,L3,L4,F5,L6,L7/) *** OPERAND -> length
**
handle_rule_50(L1,F2,L3,L4,F5,L6,L7/) *** OPERAND -> capacity
**
handle_rule_51(L1,F2,L3,L4,F5,L6,L7/) *** ASSIGNABLEOPERAND -> id
**
handle_rule_52(L1,F2,L3,L4,F5,L6,L7/) *** ASSIGNABLEOPERAND -> complex INDEX
**
handle_rule_53(L1,F2,L3,L4,F5,L6,L7/) *** ASSIGNABLEOPERAND -> length
**
handle_rule_54(L1,F2,L3,L4,F5,L6,L7/) *** ASSIGNABLEOPERAND -> capacity
**
handle_rule_55(L1,F2,L3,L4,F5,L6,L7/) *** CALLINARGS -> CALLINARG CALLINARGS
**
handle_rule_56(L1,F2,L3,L4,F5,L6,L7/) *** CALLINARGS -> , CALLINARGS
**
handle_rule_57(L1,F2,L3,L4,F5,L6,L7/) *** CALLINARGS -> ε
**
handle_rule_58(L1,F2,L3,L4,F5,L6,L7/) *** CALLINARG -> id
**
handle_rule_59(L1,F2,L3,L4,F5,L6,L7/) *** CALLINARG -> const
**
handle_rule_60(L1,F2,L3,L4,F5,L6,L7/) *** CALLINARG -> complex
**
handle_rule_61(L1,F2,L3,L4,F5,L6,L7/) *** CALLOUTARGS -> CALLOUTARG CALLOUTARGS
**
handle_rule_62(L1,F2,L3,L4,F5,L6,L7/) *** CALLOUTARGS -> , CALLOUTARGS
**
handle_rule_63(L1,F2,L3,L4,F5,L6,L7/) *** CALLOUTARGS -> ε
**
handle_rule_64(L1,F2,L3,L4,F5,L6,L7/) *** CALLOUTARG -> id
**
handle_rule_65(L1,F2,L3,L4,F5,L6,L7/) *** CALLOUTARG -> complex
**