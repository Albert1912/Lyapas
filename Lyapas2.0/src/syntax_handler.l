********************************************************************
*** syntax rules handler
*** L1 - tree metadata
*** L2 - tree nodes
*** L3 - context stack
*** i - applied rule index
********************************************************************
handle_applied_rule(L1,L2,L3,i/L1,L2,L3)
    Q3⇒n↪254
    n-2⇒t L3t⇒x+1⇒L3t n-4⇒l L3l⇒l
§254
§0 ↑(r≠0)1 *handle_rule_0(L1,L2,L3,i,l/L1,L2,L3,j)→94
§1 ↑(r≠1)2 *handle_rule_1(L1,L2,L3,i,l/L1,L2,L3,j)→94
§2 ↑(r≠2)3 *handle_rule_2(L1,L2,L3,i,l/L1,L2,L3,j)→94
§3 ↑(r≠3)4 *handle_rule_3(L1,L2,L3,i,l/L1,L2,L3,j)→94
§4 ↑(r≠4)5 *handle_rule_4(L1,L2,L3,i,l/L1,L2,L3,j)→94
§5 ↑(r≠5)6 *handle_rule_5(L1,L2,L3,i,l/L1,L2,L3,j)→94
§6 ↑(r≠6)7 *handle_rule_6(L1,L2,L3,i,l/L1,L2,L3,j)→94
§7 ↑(r≠7)8 *handle_rule_7(L1,L2,L3,i,l/L1,L2,L3,j)→94
§8 ↑(r≠8)9 *handle_rule_8(L1,L2,L3,i,l/L1,L2,L3,j)→94
§9 ↑(r≠9)10 *handle_rule_9(L1,L2,L3,i,l/L1,L2,L3,j)→94
§10 ↑(r≠10)11 *handle_rule_10(L1,L2,L3,i,l/L1,L2,L3,j)→94
§11 ↑(r≠11)12 *handle_rule_11(L1,L2,L3,i,l/L1,L2,L3,j)→94
§12 ↑(r≠12)13 *handle_rule_12(L1,L2,L3,i,l/L1,L2,L3,j)→94
§13 ↑(r≠13)14 *handle_rule_13(L1,L2,L3,i,l/L1,L2,L3,j)→94
§14 ↑(r≠14)15 *handle_rule_14(L1,L2,L3,i,l/L1,L2,L3,j)→94
§15 ↑(r≠15)16 *handle_rule_15(L1,L2,L3,i,l/L1,L2,L3,j)→94
§16 ↑(r≠16)17 *handle_rule_16(L1,L2,L3,i,l/L1,L2,L3,j)→94
§17 ↑(r≠17)18 *handle_rule_17(L1,L2,L3,i,l/L1,L2,L3,j)→94
§18 ↑(r≠18)19 *handle_rule_18(L1,L2,L3,i,l/L1,L2,L3,j)→94
§19 ↑(r≠19)20 *handle_rule_19(L1,L2,L3,i,l/L1,L2,L3,j)→94
§20 ↑(r≠20)21 *handle_rule_20(L1,L2,L3,i,l/L1,L2,L3,j)→94
§21 ↑(r≠21)22 *handle_rule_21(L1,L2,L3,i,l/L1,L2,L3,j)→94
§22 ↑(r≠22)23 *handle_rule_22(L1,L2,L3,i,l/L1,L2,L3,j)→94
§23 ↑(r≠23)24 *handle_rule_23(L1,L2,L3,i,l/L1,L2,L3,j)→94
§24 ↑(r≠24)25 *handle_rule_24(L1,L2,L3,i,l/L1,L2,L3,j)→94
§25 ↑(r≠25)26 *handle_rule_25(L1,L2,L3,i,l/L1,L2,L3,j)→94
§26 ↑(r≠26)27 *handle_rule_26(L1,L2,L3,i,l/L1,L2,L3,j)→94
§27 ↑(r≠27)28 *handle_rule_27(L1,L2,L3,i,l/L1,L2,L3,j)→94
§28 ↑(r≠28)29 *handle_rule_28(L1,L2,L3,i,l/L1,L2,L3,j)→94
§29 ↑(r≠29)30 *handle_rule_29(L1,L2,L3,i,l/L1,L2,L3,j)→94
§30 ↑(r≠30)31 *handle_rule_30(L1,L2,L3,i,l/L1,L2,L3,j)→94
§31 ↑(r≠31)32 *handle_rule_31(L1,L2,L3,i,l/L1,L2,L3,j)→94
§32 ↑(r≠32)33 *handle_rule_32(L1,L2,L3,i,l/L1,L2,L3,j)→94
§33 ↑(r≠33)34 *handle_rule_33(L1,L2,L3,i,l/L1,L2,L3,j)→94
§34 ↑(r≠34)35 *handle_rule_34(L1,L2,L3,i,l/L1,L2,L3,j)→94
§35 ↑(r≠35)36 *handle_rule_35(L1,L2,L3,i,l/L1,L2,L3,j)→94
§36 ↑(r≠36)37 *handle_rule_36(L1,L2,L3,i,l/L1,L2,L3,j)→94
§37 ↑(r≠37)38 *handle_rule_37(L1,L2,L3,i,l/L1,L2,L3,j)→94
§38 ↑(r≠38)39 *handle_rule_38(L1,L2,L3,i,l/L1,L2,L3,j)→94
§39 ↑(r≠39)40 *handle_rule_39(L1,L2,L3,i,l/L1,L2,L3,j)→94
§40 ↑(r≠40)41 *handle_rule_40(L1,L2,L3,i,l/L1,L2,L3,j)→94
§41 ↑(r≠41)42 *handle_rule_41(L1,L2,L3,i,l/L1,L2,L3,j)→94
§42 ↑(r≠42)43 *handle_rule_42(L1,L2,L3,i,l/L1,L2,L3,j)→94
§43 ↑(r≠43)44 *handle_rule_43(L1,L2,L3,i,l/L1,L2,L3,j)→94
§44 ↑(r≠44)45 *handle_rule_44(L1,L2,L3,i,l/L1,L2,L3,j)→94
§45 ↑(r≠45)46 *handle_rule_45(L1,L2,L3,i,l/L1,L2,L3,j)→94
§46 ↑(r≠46)47 *handle_rule_46(L1,L2,L3,i,l/L1,L2,L3,j)→94
§47 ↑(r≠47)48 *handle_rule_47(L1,L2,L3,i,l/L1,L2,L3,j)→94
§48 ↑(r≠48)49 *handle_rule_48(L1,L2,L3,i,l/L1,L2,L3,j)→94
§49 ↑(r≠49)50 *handle_rule_49(L1,L2,L3,i,l/L1,L2,L3,j)→94
§50 ↑(r≠50)51 *handle_rule_50(L1,L2,L3,i,l/L1,L2,L3,j)→94
§51 ↑(r≠51)52 *handle_rule_51(L1,L2,L3,i,l/L1,L2,L3,j)→94
§52 ↑(r≠52)53 *handle_rule_52(L1,L2,L3,i,l/L1,L2,L3,j)→94
§53 ↑(r≠53)54 *handle_rule_53(L1,L2,L3,i,l/L1,L2,L3,j)→94
§54 ↑(r≠54)55 *handle_rule_54(L1,L2,L3,i,l/L1,L2,L3,j)→94
§55 ↑(r≠55)56 *handle_rule_55(L1,L2,L3,i,l/L1,L2,L3,j)→94
§56 ↑(r≠56)57 *handle_rule_56(L1,L2,L3,i,l/L1,L2,L3,j)→94
§57 ↑(r≠57)58 *handle_rule_57(L1,L2,L3,i,l/L1,L2,L3,j)→94
§58 ↑(r≠58)59 *handle_rule_58(L1,L2,L3,i,l/L1,L2,L3,j)→94
§59 ↑(r≠59)60 *handle_rule_59(L1,L2,L3,i,l/L1,L2,L3,j)→94
§60 ↑(r≠60)61 *handle_rule_60(L1,L2,L3,i,l/L1,L2,L3,j)→94
§61 ↑(r≠61)62 *handle_rule_61(L1,L2,L3,i,l/L1,L2,L3,j)→94
§62 ↑(r≠62)63 *handle_rule_62(L1,L2,L3,i,l/L1,L2,L3,j)→94
§63 ↑(r≠63)64 *handle_rule_63(L1,L2,L3,i,l/L1,L2,L3,j)→94
§64 ↑(r≠64)65 *handle_rule_64(L1,L2,L3,i,l/L1,L2,L3,j)→94
§65 ↑(r≠65)66 *handle_rule_65(L1,L2,L3,i,l/L1,L2,L3,j)→94
§66 ↑(r≠66)67 *handle_rule_66(L1,L2,L3,i,l/L1,L2,L3,j)→94
§67 ↑(r≠67)68 *handle_rule_67(L1,L2,L3,i,l/L1,L2,L3,j)→94
§68 ↑(r≠68)69 *handle_rule_68(L1,L2,L3,i,l/L1,L2,L3,j)→94
§69 ↑(r≠69)70 *handle_rule_69(L1,L2,L3,i,l/L1,L2,L3,j)→94
§70 ↑(r≠70)71 *handle_rule_70(L1,L2,L3,i,l/L1,L2,L3,j)→94
§71 ↑(r≠71)72 *handle_rule_71(L1,L2,L3,i,l/L1,L2,L3,j)→94
§72 ↑(r≠72)73 *handle_rule_72(L1,L2,L3,i,l/L1,L2,L3,j)→94
§73 ↑(r≠73)74 *handle_rule_73(L1,L2,L3,i,l/L1,L2,L3,j)→94
§74 ↑(r≠74)75 *handle_rule_74(L1,L2,L3,i,l/L1,L2,L3,j)→94
§75 ↑(r≠75)76 *handle_rule_75(L1,L2,L3,i,l/L1,L2,L3,j)→94
§76 ↑(r≠76)77 *handle_rule_76(L1,L2,L3,i,l/L1,L2,L3,j)→94
§77 ↑(r≠77)78 *handle_rule_77(L1,L2,L3,i,l/L1,L2,L3,j)→94
§78 ↑(r≠78)79 *handle_rule_78(L1,L2,L3,i,l/L1,L2,L3,j)→94
§79 ↑(r≠79)80 *handle_rule_79(L1,L2,L3,i,l/L1,L2,L3,j)→94
§80 ↑(r≠80)81 *handle_rule_80(L1,L2,L3,i,l/L1,L2,L3,j)→94
§81 ↑(r≠81)82 *handle_rule_81(L1,L2,L3,i,l/L1,L2,L3,j)→94
§82 ↑(r≠82)83 *handle_rule_82(L1,L2,L3,i,l/L1,L2,L3,j)→94
§83 ↑(r≠83)84 *handle_rule_83(L1,L2,L3,i,l/L1,L2,L3,j)→94
§84 ↑(r≠84)85 *handle_rule_84(L1,L2,L3,i,l/L1,L2,L3,j)→94
§85 ↑(r≠85)86 *handle_rule_85(L1,L2,L3,i,l/L1,L2,L3,j)→94
§86 ↑(r≠86)87 *handle_rule_86(L1,L2,L3,i,l/L1,L2,L3,j)→94
§87 ↑(r≠87)88 *handle_rule_87(L1,L2,L3,i,l/L1,L2,L3,j)→94
§88 ↑(r≠88)89 *handle_rule_88(L1,L2,L3,i,l/L1,L2,L3,j)→94
§89 ↑(r≠89)90 *handle_rule_89(L1,L2,L3,i,l/L1,L2,L3,j)→94
§90 ↑(r≠90)91 *handle_rule_90(L1,L2,L3,i,l/L1,L2,L3,j)→94
§91 ↑(r≠91)92 *handle_rule_91(L1,L2,L3,i,l/L1,L2,L3,j)→94
§92 ↑(r≠92)93 *handle_rule_92(L1,L2,L3,i,l/L1,L2,L3,j)→94
§93 ↑(r≠93)94 *handle_rule_93(L1,L2,L3,i,l/L1,L2,L3,j)→94
§94

    *get_m(i/x) x↪255 Q3+4⇒n⇒Q3
    n-4⇒l j⇒L3l
    n-3⇒r i⇒L3r
    n-2⇒t 0⇒L3t
    n-1⇒m x⇒L3m
§255
    *free_context_stack(L3/L3)
**
********************************************************************
free_context_stack(L1/L1)
    Q1⇒n↪1
    n-2⇒t L1t⇒t
    n-1⇒m L1m⇒m
    ↑(t<m)1 Q1-4⇒Q1 *free_context_stack(L1/L1)
§1
**
********************************************************************
*** syntax rules handler
*** L1 - tree metadata
*** L2 - tree nodes
*** L3 - context stack
*** F4 - token array
*** L5 - token array metadata
*** i - accepted terminal index
********************************************************************
handle_accepted_terminal(L1,L2,L3,F4,L5,i/L1,L2,L3)
    Q3⇒n-3⇒r L3r⇒r
    Q3⇒n-2⇒t L3t⇒t
    Q3⇒n-4⇒l L3l⇒l
§0 ↑(r≠0)1 *handle_terminal_0(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§1 ↑(r≠1)2 *handle_terminal_1(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§2 ↑(r≠2)3 *handle_terminal_2(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§3 ↑(r≠3)4 *handle_terminal_3(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§4 ↑(r≠4)5 *handle_terminal_4(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§5 ↑(r≠5)6 *handle_terminal_5(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§6 ↑(r≠6)7 *handle_terminal_6(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§7 ↑(r≠7)8 *handle_terminal_7(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§8 ↑(r≠8)9 *handle_terminal_8(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§9 ↑(r≠9)10 *handle_terminal_9(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§10 ↑(r≠10)11 *handle_terminal_10(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§11 ↑(r≠11)12 *handle_terminal_11(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§12 ↑(r≠12)13 *handle_terminal_12(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§13 ↑(r≠13)14 *handle_terminal_13(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§14 ↑(r≠14)15 *handle_terminal_14(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§15 ↑(r≠15)16 *handle_terminal_15(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§16 ↑(r≠16)17 *handle_terminal_16(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§17 ↑(r≠17)18 *handle_terminal_17(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§18 ↑(r≠18)19 *handle_terminal_18(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§19 ↑(r≠19)20 *handle_terminal_19(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§20 ↑(r≠20)21 *handle_terminal_20(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§21 ↑(r≠21)22 *handle_terminal_21(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§22 ↑(r≠22)23 *handle_terminal_22(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§23 ↑(r≠23)24 *handle_terminal_23(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§24 ↑(r≠24)25 *handle_terminal_24(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§25 ↑(r≠25)26 *handle_terminal_25(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§26 ↑(r≠26)27 *handle_terminal_26(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§27 ↑(r≠27)28 *handle_terminal_27(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§28 ↑(r≠28)29 *handle_terminal_28(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§29 ↑(r≠29)30 *handle_terminal_29(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§30 ↑(r≠30)31 *handle_terminal_30(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§31 ↑(r≠31)32 *handle_terminal_31(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§32 ↑(r≠32)33 *handle_terminal_32(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§33 ↑(r≠33)34 *handle_terminal_33(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§34 ↑(r≠34)35 *handle_terminal_34(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§35 ↑(r≠35)36 *handle_terminal_35(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§36 ↑(r≠36)37 *handle_terminal_36(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§37 ↑(r≠37)38 *handle_terminal_37(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§38 ↑(r≠38)39 *handle_terminal_38(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§39 ↑(r≠39)40 *handle_terminal_39(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§40 ↑(r≠40)41 *handle_terminal_40(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§41 ↑(r≠41)42 *handle_terminal_41(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§42 ↑(r≠42)43 *handle_terminal_42(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§43 ↑(r≠43)44 *handle_terminal_43(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§44 ↑(r≠44)45 *handle_terminal_44(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§45 ↑(r≠45)46 *handle_terminal_45(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§46 ↑(r≠46)47 *handle_terminal_46(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§47 ↑(r≠47)48 *handle_terminal_47(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§48 ↑(r≠48)49 *handle_terminal_48(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§49 ↑(r≠49)50 *handle_terminal_49(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§50 ↑(r≠50)51 *handle_terminal_50(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§51 ↑(r≠51)52 *handle_terminal_51(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§52 ↑(r≠52)53 *handle_terminal_52(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§53 ↑(r≠53)54 *handle_terminal_53(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§54 ↑(r≠54)55 *handle_terminal_54(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§55 ↑(r≠55)56 *handle_terminal_55(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§56 ↑(r≠56)57 *handle_terminal_56(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§57 ↑(r≠57)58 *handle_terminal_57(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§58 ↑(r≠58)59 *handle_terminal_58(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§59 ↑(r≠59)60 *handle_terminal_59(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§60 ↑(r≠60)61 *handle_terminal_60(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§61 ↑(r≠61)62 *handle_terminal_61(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§62 ↑(r≠62)63 *handle_terminal_62(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§63 ↑(r≠63)64 *handle_terminal_63(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§64 ↑(r≠64)65 *handle_terminal_64(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§65 ↑(r≠65)66 *handle_terminal_65(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§66 ↑(r≠66)67 *handle_terminal_66(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§67 ↑(r≠67)68 *handle_terminal_67(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§68 ↑(r≠68)69 *handle_terminal_68(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§69 ↑(r≠69)70 *handle_terminal_69(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§70 ↑(r≠70)71 *handle_terminal_70(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§71 ↑(r≠71)72 *handle_terminal_71(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§72 ↑(r≠72)73 *handle_terminal_72(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§73 ↑(r≠73)74 *handle_terminal_73(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§74 ↑(r≠74)75 *handle_terminal_74(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§75 ↑(r≠75)76 *handle_terminal_75(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§76 ↑(r≠76)77 *handle_terminal_76(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§77 ↑(r≠77)78 *handle_terminal_77(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§78 ↑(r≠78)79 *handle_terminal_78(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§79 ↑(r≠79)80 *handle_terminal_79(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§80 ↑(r≠80)81 *handle_terminal_80(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§81 ↑(r≠81)82 *handle_terminal_81(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§82 ↑(r≠82)83 *handle_terminal_82(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§83 ↑(r≠83)84 *handle_terminal_83(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§84 ↑(r≠84)85 *handle_terminal_84(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§85 ↑(r≠85)86 *handle_terminal_85(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§86 ↑(r≠86)87 *handle_terminal_86(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§87 ↑(r≠87)88 *handle_terminal_87(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§88 ↑(r≠88)89 *handle_terminal_88(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§89 ↑(r≠89)90 *handle_terminal_89(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§90 ↑(r≠90)91 *handle_terminal_90(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§91 ↑(r≠91)92 *handle_terminal_91(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§92 ↑(r≠92)93 *handle_terminal_92(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§93 ↑(r≠93)94 *handle_terminal_93(L1,L2,L3,F4,L5,i,t,l/L1,L2,L3,j)→94
§94
    Q3-2⇒t L3t⇒x+1⇒L3t
    Q3-4⇒l j⇒L3l
    *free_context_stack(L3/L3)
**
********************************************************************
get_m(i/m)
§0 ↑(i≠0)1 4⇒m→94
§1 ↑(i≠1)2 0⇒m→94
§2 ↑(i≠2)3 6⇒m→94
§3 ↑(i≠3)4 2⇒m→94
§4 ↑(i≠4)5 2⇒m→94
§5 ↑(i≠5)6 0⇒m→94
§6 ↑(i≠6)7 1⇒m→94
§7 ↑(i≠7)8 1⇒m→94
§8 ↑(i≠8)9 2⇒m→94
§9 ↑(i≠9)10 2⇒m→94
§10 ↑(i≠10)11 0⇒m→94
§11 ↑(i≠11)12 1⇒m→94
§12 ↑(i≠12)13 1⇒m→94
§13 ↑(i≠13)14 1⇒m→94
§14 ↑(i≠14)15 3⇒m→94
§15 ↑(i≠15)16 2⇒m→94
§16 ↑(i≠16)17 2⇒m→94
§17 ↑(i≠17)18 5⇒m→94
§18 ↑(i≠18)19 3⇒m→94
§19 ↑(i≠19)20 3⇒m→94
§20 ↑(i≠20)21 2⇒m→94
§21 ↑(i≠21)22 2⇒m→94
§22 ↑(i≠22)23 2⇒m→94
§23 ↑(i≠23)24 3⇒m→94
§24 ↑(i≠24)25 3⇒m→94
§25 ↑(i≠25)26 3⇒m→94
§26 ↑(i≠26)27 3⇒m→94
§27 ↑(i≠27)28 3⇒m→94
§28 ↑(i≠28)29 3⇒m→94
§29 ↑(i≠29)30 8⇒m→94
§30 ↑(i≠30)31 3⇒m→94
§31 ↑(i≠31)32 3⇒m→94
§32 ↑(i≠32)33 0⇒m→94
§33 ↑(i≠33)34 6⇒m→94
§34 ↑(i≠34)35 1⇒m→94
§35 ↑(i≠35)36 1⇒m→94
§36 ↑(i≠36)37 2⇒m→94
§37 ↑(i≠37)38 3⇒m→94
§38 ↑(i≠38)39 1⇒m→94
§39 ↑(i≠39)40 2⇒m→94
§40 ↑(i≠40)41 1⇒m→94
§41 ↑(i≠41)42 5⇒m→94
§42 ↑(i≠42)43 2⇒m→94
§43 ↑(i≠43)44 3⇒m→94
§44 ↑(i≠44)45 2⇒m→94
§45 ↑(i≠45)46 3⇒m→94
§46 ↑(i≠46)47 1⇒m→94
§47 ↑(i≠47)48 2⇒m→94
§48 ↑(i≠48)49 1⇒m→94
§49 ↑(i≠49)50 1⇒m→94
§50 ↑(i≠50)51 1⇒m→94
§51 ↑(i≠51)52 1⇒m→94
§52 ↑(i≠52)53 1⇒m→94
§53 ↑(i≠53)54 1⇒m→94
§54 ↑(i≠54)55 1⇒m→94
§55 ↑(i≠55)56 2⇒m→94
§56 ↑(i≠56)57 1⇒m→94
§57 ↑(i≠57)58 1⇒m→94
§58 ↑(i≠58)59 1⇒m→94
§59 ↑(i≠59)60 1⇒m→94
§60 ↑(i≠60)61 1⇒m→94
§61 ↑(i≠61)62 1⇒m→94
§62 ↑(i≠62)63 1⇒m→94
§63 ↑(i≠63)64 1⇒m→94
§64 ↑(i≠64)65 1⇒m→94
§65 ↑(i≠65)66 1⇒m→94
§66 ↑(i≠66)67 1⇒m→94
§67 ↑(i≠67)68 1⇒m→94
§68 ↑(i≠68)69 1⇒m→94
§69 ↑(i≠69)70 1⇒m→94
§70 ↑(i≠70)71 1⇒m→94
§71 ↑(i≠71)72 1⇒m→94
§72 ↑(i≠72)73 1⇒m→94
§73 ↑(i≠73)74 1⇒m→94
§74 ↑(i≠74)75 1⇒m→94
§75 ↑(i≠75)76 1⇒m→94
§76 ↑(i≠76)77 1⇒m→94
§77 ↑(i≠77)78 1⇒m→94
§78 ↑(i≠78)79 2⇒m→94
§79 ↑(i≠79)80 1⇒m→94
§80 ↑(i≠80)81 2⇒m→94
§81 ↑(i≠81)82 1⇒m→94
§82 ↑(i≠82)83 1⇒m→94
§83 ↑(i≠83)84 2⇒m→94
§84 ↑(i≠84)85 2⇒m→94
§85 ↑(i≠85)86 0⇒m→94
§86 ↑(i≠86)87 1⇒m→94
§87 ↑(i≠87)88 1⇒m→94
§88 ↑(i≠88)89 1⇒m→94
§89 ↑(i≠89)90 2⇒m→94
§90 ↑(i≠90)91 2⇒m→94
§91 ↑(i≠91)92 0⇒m→94
§92 ↑(i≠92)93 1⇒m→94
§93 ↑(i≠93)94 1⇒m→94
§94

**

handle_rule_0(L1,L2,L3,i,n/L1,L2,L3,j) *** SUBPROGRAM -> HEAD BODY ** SUBPROGRAM
**
handle_rule_1(L1,L2,L3,i,n/L1,L2,L3,j) *** SUBPROGRAM -> ε
**
handle_rule_2(L1,L2,L3,i,n/L1,L2,L3,j) *** HEAD -> name ( INARGS / OUTARGS )
**
handle_rule_3(L1,L2,L3,i,n/L1,L2,L3,j) *** INARGS -> INARG INARGS
**
handle_rule_4(L1,L2,L3,i,n/L1,L2,L3,j) *** INARGS -> , INARGS
**
handle_rule_5(L1,L2,L3,i,n/L1,L2,L3,j) *** INARGS -> ε
**
handle_rule_6(L1,L2,L3,i,n/L1,L2,L3,j) *** INARG -> id
**
handle_rule_7(L1,L2,L3,i,n/L1,L2,L3,j) *** INARG -> complex
**
handle_rule_8(L1,L2,L3,i,n/L1,L2,L3,j) *** OUTARGS -> OUTARG OUTARGS
**
handle_rule_9(L1,L2,L3,i,n/L1,L2,L3,j) *** OUTARGS -> , OUTARGS
**
handle_rule_10(L1,L2,L3,i,n/L1,L2,L3,j) *** OUTARGS -> ε
**
handle_rule_11(L1,L2,L3,i,n/L1,L2,L3,j) *** OUTARG -> id
**
handle_rule_12(L1,L2,L3,i,n/L1,L2,L3,j) *** OUTARG -> complex
**
handle_rule_13(L1,L2,L3,i,n/L1,L2,L3,j) *** BODY -> EXPR
**
handle_rule_14(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> assign ASSIGNABLEOPERAND EXPR
**
handle_rule_15(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> OPERAND EXPR
**
handle_rule_16(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> COMPLEX EXPR
**
handle_rule_17(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> swap ( SWAPEXPR ) EXPR
**
handle_rule_18(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> zeroing ASSIGNABLEOPERAND EXPR
**
handle_rule_19(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> maximize ASSIGNABLEOPERAND EXPR
**
handle_rule_20(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> lowerone EXPR
**
handle_rule_21(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> inversion EXPR
**
handle_rule_22(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> weighing EXPR
**
handle_rule_23(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> ARITHMETICOP OPERAND EXPR
**
handle_rule_24(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> * STAREXPR EXPR
**
handle_rule_25(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> / SLASHEXPR EXPR
**
handle_rule_26(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> inc ASSIGNABLEOPERAND EXPR
**
handle_rule_27(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> dec ASSIGNABLEOPERAND EXPR
**
handle_rule_28(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> JUMPOP const EXPR
**
handle_rule_29(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> cmp ( OPERAND CONDITIONOP OPERAND ) const EXPR
**
handle_rule_30(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> par const EXPR
**
handle_rule_31(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> at COMPLEXEXPR EXPR
**
handle_rule_32(L1,L2,L3,i,n/L1,L2,L3,j) *** EXPR -> ε
**
handle_rule_33(L1,L2,L3,i,n/L1,L2,L3,j) *** STAREXPR -> name ( CALLINARGS / CALLOUTARGS )
**
handle_rule_34(L1,L2,L3,i,n/L1,L2,L3,j) *** STAREXPR -> OPERAND
**
handle_rule_35(L1,L2,L3,i,n/L1,L2,L3,j) *** STAREXPR -> COMPLEX
**
handle_rule_36(L1,L2,L3,i,n/L1,L2,L3,j) *** SLASHEXPR -> complex COMPLEXSLASHEXPR
**
handle_rule_37(L1,L2,L3,i,n/L1,L2,L3,j) *** SLASHEXPR -> string CONSOLEACTION console
**
handle_rule_38(L1,L2,L3,i,n/L1,L2,L3,j) *** SLASHEXPR -> OPERAND
**
handle_rule_39(L1,L2,L3,i,n/L1,L2,L3,j) *** COMPLEXSLASHEXPR -> CONSOLEACTION console
**
handle_rule_40(L1,L2,L3,i,n/L1,L2,L3,j) *** COMPLEXSLASHEXPR -> INDEX
**
handle_rule_41(L1,L2,L3,i,n/L1,L2,L3,j) *** COMPLEXEXPR -> + complex ( const )
**
handle_rule_42(L1,L2,L3,i,n/L1,L2,L3,j) *** COMPLEXEXPR -> zeroing complex
**
handle_rule_43(L1,L2,L3,i,n/L1,L2,L3,j) *** COMPLEXEXPR -> string g complex
**
handle_rule_44(L1,L2,L3,i,n/L1,L2,L3,j) *** SWAPEXPR -> id id
**
handle_rule_45(L1,L2,L3,i,n/L1,L2,L3,j) *** SWAPEXPR -> complex SWAPFIRST SWAPSECOND
**
handle_rule_46(L1,L2,L3,i,n/L1,L2,L3,j) *** SWAPFIRST -> id
**
handle_rule_47(L1,L2,L3,i,n/L1,L2,L3,j) *** SWAPFIRST -> . const
**
handle_rule_48(L1,L2,L3,i,n/L1,L2,L3,j) *** SWAPSECOND -> id
**
handle_rule_49(L1,L2,L3,i,n/L1,L2,L3,j) *** SWAPSECOND -> const
**
handle_rule_50(L1,L2,L3,i,n/L1,L2,L3,j) *** CONSOLEACTION -> l
**
handle_rule_51(L1,L2,L3,i,n/L1,L2,L3,j) *** CONSOLEACTION -> g
**
handle_rule_52(L1,L2,L3,i,n/L1,L2,L3,j) *** JUMPOP -> jz
**
handle_rule_53(L1,L2,L3,i,n/L1,L2,L3,j) *** JUMPOP -> jnz
**
handle_rule_54(L1,L2,L3,i,n/L1,L2,L3,j) *** JUMPOP -> jump
**
handle_rule_55(L1,L2,L3,i,n/L1,L2,L3,j) *** INDEX -> . const
**
handle_rule_56(L1,L2,L3,i,n/L1,L2,L3,j) *** INDEX -> id
**
handle_rule_57(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> +
**
handle_rule_58(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> -
**
handle_rule_59(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> ;
**
handle_rule_60(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> and
**
handle_rule_61(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> or
**
handle_rule_62(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> xor
**
handle_rule_63(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> g
**
handle_rule_64(L1,L2,L3,i,n/L1,L2,L3,j) *** ARITHMETICOP -> l
**
handle_rule_65(L1,L2,L3,i,n/L1,L2,L3,j) *** CONDITIONOP -> e
**
handle_rule_66(L1,L2,L3,i,n/L1,L2,L3,j) *** CONDITIONOP -> ne
**
handle_rule_67(L1,L2,L3,i,n/L1,L2,L3,j) *** CONDITIONOP -> g
**
handle_rule_68(L1,L2,L3,i,n/L1,L2,L3,j) *** CONDITIONOP -> ge
**
handle_rule_69(L1,L2,L3,i,n/L1,L2,L3,j) *** CONDITIONOP -> l
**
handle_rule_70(L1,L2,L3,i,n/L1,L2,L3,j) *** CONDITIONOP -> le
**
handle_rule_71(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> id
**
handle_rule_72(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> const
**
handle_rule_73(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> length
**
handle_rule_74(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> capacity
**
handle_rule_75(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> random
**
handle_rule_76(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> singleconst
**
handle_rule_77(L1,L2,L3,i,n/L1,L2,L3,j) *** OPERAND -> time
**
handle_rule_78(L1,L2,L3,i,n/L1,L2,L3,j) *** COMPLEX -> complex INDEX
**
handle_rule_79(L1,L2,L3,i,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> id
**
handle_rule_80(L1,L2,L3,i,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> complex INDEX
**
handle_rule_81(L1,L2,L3,i,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> length
**
handle_rule_82(L1,L2,L3,i,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> random
**
handle_rule_83(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLINARGS -> CALLINARG CALLINARGS
**
handle_rule_84(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLINARGS -> , CALLINARGS
**
handle_rule_85(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLINARGS -> ε
**
handle_rule_86(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLINARG -> id
**
handle_rule_87(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLINARG -> const
**
handle_rule_88(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLINARG -> complex
**
handle_rule_89(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLOUTARGS -> CALLOUTARG CALLOUTARGS
**
handle_rule_90(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLOUTARGS -> , CALLOUTARGS
**
handle_rule_91(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLOUTARGS -> ε
**
handle_rule_92(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLOUTARG -> id
**
handle_rule_93(L1,L2,L3,i,n/L1,L2,L3,j) *** CALLOUTARG -> complex
**
handle_terminal_0(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SUBPROGRAM -> HEAD BODY ** SUBPROGRAM
**
handle_terminal_1(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SUBPROGRAM -> ε
**
handle_terminal_2(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** HEAD -> name ( INARGS / OUTARGS )
**
handle_terminal_3(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INARGS -> INARG INARGS
**
handle_terminal_4(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INARGS -> , INARGS
**
handle_terminal_5(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INARGS -> ε
**
handle_terminal_6(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INARG -> id
**
handle_terminal_7(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INARG -> complex
**
handle_terminal_8(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OUTARGS -> OUTARG OUTARGS
**
handle_terminal_9(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OUTARGS -> , OUTARGS
**
handle_terminal_10(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OUTARGS -> ε
**
handle_terminal_11(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OUTARG -> id
**
handle_terminal_12(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OUTARG -> complex
**
handle_terminal_13(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** BODY -> EXPR
**
handle_terminal_14(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> assign ASSIGNABLEOPERAND EXPR
**
handle_terminal_15(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> OPERAND EXPR
**
handle_terminal_16(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> COMPLEX EXPR
**
handle_terminal_17(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> swap ( SWAPEXPR ) EXPR
**
handle_terminal_18(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> zeroing ASSIGNABLEOPERAND EXPR
**
handle_terminal_19(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> maximize ASSIGNABLEOPERAND EXPR
**
handle_terminal_20(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> lowerone EXPR
**
handle_terminal_21(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> inversion EXPR
**
handle_terminal_22(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> weighing EXPR
**
handle_terminal_23(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> ARITHMETICOP OPERAND EXPR
**
handle_terminal_24(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> * STAREXPR EXPR
**
handle_terminal_25(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> / SLASHEXPR EXPR
**
handle_terminal_26(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> inc ASSIGNABLEOPERAND EXPR
**
handle_terminal_27(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> dec ASSIGNABLEOPERAND EXPR
**
handle_terminal_28(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> JUMPOP const EXPR
**
handle_terminal_29(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> cmp ( OPERAND CONDITIONOP OPERAND ) const EXPR
**
handle_terminal_30(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> par const EXPR
**
handle_terminal_31(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> at COMPLEXEXPR EXPR
**
handle_terminal_32(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** EXPR -> ε
**
handle_terminal_33(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** STAREXPR -> name ( CALLINARGS / CALLOUTARGS )
**
handle_terminal_34(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** STAREXPR -> OPERAND
**
handle_terminal_35(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** STAREXPR -> COMPLEX
**
handle_terminal_36(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SLASHEXPR -> complex COMPLEXSLASHEXPR
**
handle_terminal_37(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SLASHEXPR -> string CONSOLEACTION console
**
handle_terminal_38(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SLASHEXPR -> OPERAND
**
handle_terminal_39(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** COMPLEXSLASHEXPR -> CONSOLEACTION console
**
handle_terminal_40(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** COMPLEXSLASHEXPR -> INDEX
**
handle_terminal_41(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** COMPLEXEXPR -> + complex ( const )
**
handle_terminal_42(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** COMPLEXEXPR -> zeroing complex
**
handle_terminal_43(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** COMPLEXEXPR -> string g complex
**
handle_terminal_44(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SWAPEXPR -> id id
**
handle_terminal_45(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SWAPEXPR -> complex SWAPFIRST SWAPSECOND
**
handle_terminal_46(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SWAPFIRST -> id
**
handle_terminal_47(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SWAPFIRST -> . const
**
handle_terminal_48(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SWAPSECOND -> id
**
handle_terminal_49(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** SWAPSECOND -> const
**
handle_terminal_50(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONSOLEACTION -> l
**
handle_terminal_51(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONSOLEACTION -> g
**
handle_terminal_52(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** JUMPOP -> jz
**
handle_terminal_53(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** JUMPOP -> jnz
**
handle_terminal_54(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** JUMPOP -> jump
**
handle_terminal_55(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INDEX -> . const
**
handle_terminal_56(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** INDEX -> id
**
handle_terminal_57(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> +
**
handle_terminal_58(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> -
**
handle_terminal_59(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> ;
**
handle_terminal_60(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> and
**
handle_terminal_61(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> or
**
handle_terminal_62(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> xor
**
handle_terminal_63(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> g
**
handle_terminal_64(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ARITHMETICOP -> l
**
handle_terminal_65(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONDITIONOP -> e
**
handle_terminal_66(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONDITIONOP -> ne
**
handle_terminal_67(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONDITIONOP -> g
**
handle_terminal_68(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONDITIONOP -> ge
**
handle_terminal_69(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONDITIONOP -> l
**
handle_terminal_70(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CONDITIONOP -> le
**
handle_terminal_71(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> id
**
handle_terminal_72(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> const
**
handle_terminal_73(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> length
**
handle_terminal_74(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> capacity
**
handle_terminal_75(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> random
**
handle_terminal_76(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> singleconst
**
handle_terminal_77(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** OPERAND -> time
**
handle_terminal_78(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** COMPLEX -> complex INDEX
**
handle_terminal_79(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> id
**
handle_terminal_80(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> complex INDEX
**
handle_terminal_81(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> length
**
handle_terminal_82(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> random
**
handle_terminal_83(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLINARGS -> CALLINARG CALLINARGS
**
handle_terminal_84(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLINARGS -> , CALLINARGS
**
handle_terminal_85(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLINARGS -> ε
**
handle_terminal_86(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLINARG -> id
**
handle_terminal_87(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLINARG -> const
**
handle_terminal_88(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLINARG -> complex
**
handle_terminal_89(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLOUTARGS -> CALLOUTARG CALLOUTARGS
**
handle_terminal_90(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLOUTARGS -> , CALLOUTARGS
**
handle_terminal_91(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLOUTARGS -> ε
**
handle_terminal_92(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLOUTARG -> id
**
handle_terminal_93(L1,L2,L3,F4,L5,i,t,n/L1,L2,L3,j) *** CALLOUTARG -> complex
**