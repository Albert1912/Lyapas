********************************************************************
*** syntax rules handler
*** L1 - tree metadata
*** L2 - tree nodes
*** L3 - context stack
*** i - applied rule index
********************************************************************
handle_applied_rule(L1,L2,L3,i/L1,L2,L3)
    Q3⇒n Ol n↪254
    n-2⇒t L3t⇒x+1⇒L3t n-4⇒l L3l⇒l
§254
§0 ↑(i≠0)1 *handle_rule_0(L1,L2,L3,l/L1,L2,L3,j)→110
§1 ↑(i≠1)2 *handle_rule_1(L1,L2,L3,l/L1,L2,L3,j)→110
§2 ↑(i≠2)3 *handle_rule_2(L1,L2,L3,l/L1,L2,L3,j)→110
§3 ↑(i≠3)4 *handle_rule_3(L1,L2,L3,l/L1,L2,L3,j)→110
§4 ↑(i≠4)5 *handle_rule_4(L1,L2,L3,l/L1,L2,L3,j)→110
§5 ↑(i≠5)6 *handle_rule_5(L1,L2,L3,l/L1,L2,L3,j)→110
§6 ↑(i≠6)7 *handle_rule_6(L1,L2,L3,l/L1,L2,L3,j)→110
§7 ↑(i≠7)8 *handle_rule_7(L1,L2,L3,l/L1,L2,L3,j)→110
§8 ↑(i≠8)9 *handle_rule_8(L1,L2,L3,l/L1,L2,L3,j)→110
§9 ↑(i≠9)10 *handle_rule_9(L1,L2,L3,l/L1,L2,L3,j)→110
§10 ↑(i≠10)11 *handle_rule_10(L1,L2,L3,l/L1,L2,L3,j)→110
§11 ↑(i≠11)12 *handle_rule_11(L1,L2,L3,l/L1,L2,L3,j)→110
§12 ↑(i≠12)13 *handle_rule_12(L1,L2,L3,l/L1,L2,L3,j)→110
§13 ↑(i≠13)14 *handle_rule_13(L1,L2,L3,l/L1,L2,L3,j)→110
§14 ↑(i≠14)15 *handle_rule_14(L1,L2,L3,l/L1,L2,L3,j)→110
§15 ↑(i≠15)16 *handle_rule_15(L1,L2,L3,l/L1,L2,L3,j)→110
§16 ↑(i≠16)17 *handle_rule_16(L1,L2,L3,l/L1,L2,L3,j)→110
§17 ↑(i≠17)18 *handle_rule_17(L1,L2,L3,l/L1,L2,L3,j)→110
§18 ↑(i≠18)19 *handle_rule_18(L1,L2,L3,l/L1,L2,L3,j)→110
§19 ↑(i≠19)20 *handle_rule_19(L1,L2,L3,l/L1,L2,L3,j)→110
§20 ↑(i≠20)21 *handle_rule_20(L1,L2,L3,l/L1,L2,L3,j)→110
§21 ↑(i≠21)22 *handle_rule_21(L1,L2,L3,l/L1,L2,L3,j)→110
§22 ↑(i≠22)23 *handle_rule_22(L1,L2,L3,l/L1,L2,L3,j)→110
§23 ↑(i≠23)24 *handle_rule_23(L1,L2,L3,l/L1,L2,L3,j)→110
§24 ↑(i≠24)25 *handle_rule_24(L1,L2,L3,l/L1,L2,L3,j)→110
§25 ↑(i≠25)26 *handle_rule_25(L1,L2,L3,l/L1,L2,L3,j)→110
§26 ↑(i≠26)27 *handle_rule_26(L1,L2,L3,l/L1,L2,L3,j)→110
§27 ↑(i≠27)28 *handle_rule_27(L1,L2,L3,l/L1,L2,L3,j)→110
§28 ↑(i≠28)29 *handle_rule_28(L1,L2,L3,l/L1,L2,L3,j)→110
§29 ↑(i≠29)30 *handle_rule_29(L1,L2,L3,l/L1,L2,L3,j)→110
§30 ↑(i≠30)31 *handle_rule_30(L1,L2,L3,l/L1,L2,L3,j)→110
§31 ↑(i≠31)32 *handle_rule_31(L1,L2,L3,l/L1,L2,L3,j)→110
§32 ↑(i≠32)33 *handle_rule_32(L1,L2,L3,l/L1,L2,L3,j)→110
§33 ↑(i≠33)34 *handle_rule_33(L1,L2,L3,l/L1,L2,L3,j)→110
§34 ↑(i≠34)35 *handle_rule_34(L1,L2,L3,l/L1,L2,L3,j)→110
§35 ↑(i≠35)36 *handle_rule_35(L1,L2,L3,l/L1,L2,L3,j)→110
§36 ↑(i≠36)37 *handle_rule_36(L1,L2,L3,l/L1,L2,L3,j)→110
§37 ↑(i≠37)38 *handle_rule_37(L1,L2,L3,l/L1,L2,L3,j)→110
§38 ↑(i≠38)39 *handle_rule_38(L1,L2,L3,l/L1,L2,L3,j)→110
§39 ↑(i≠39)40 *handle_rule_39(L1,L2,L3,l/L1,L2,L3,j)→110
§40 ↑(i≠40)41 *handle_rule_40(L1,L2,L3,l/L1,L2,L3,j)→110
§41 ↑(i≠41)42 *handle_rule_41(L1,L2,L3,l/L1,L2,L3,j)→110
§42 ↑(i≠42)43 *handle_rule_42(L1,L2,L3,l/L1,L2,L3,j)→110
§43 ↑(i≠43)44 *handle_rule_43(L1,L2,L3,l/L1,L2,L3,j)→110
§44 ↑(i≠44)45 *handle_rule_44(L1,L2,L3,l/L1,L2,L3,j)→110
§45 ↑(i≠45)46 *handle_rule_45(L1,L2,L3,l/L1,L2,L3,j)→110
§46 ↑(i≠46)47 *handle_rule_46(L1,L2,L3,l/L1,L2,L3,j)→110
§47 ↑(i≠47)48 *handle_rule_47(L1,L2,L3,l/L1,L2,L3,j)→110
§48 ↑(i≠48)49 *handle_rule_48(L1,L2,L3,l/L1,L2,L3,j)→110
§49 ↑(i≠49)50 *handle_rule_49(L1,L2,L3,l/L1,L2,L3,j)→110
§50 ↑(i≠50)51 *handle_rule_50(L1,L2,L3,l/L1,L2,L3,j)→110
§51 ↑(i≠51)52 *handle_rule_51(L1,L2,L3,l/L1,L2,L3,j)→110
§52 ↑(i≠52)53 *handle_rule_52(L1,L2,L3,l/L1,L2,L3,j)→110
§53 ↑(i≠53)54 *handle_rule_53(L1,L2,L3,l/L1,L2,L3,j)→110
§54 ↑(i≠54)55 *handle_rule_54(L1,L2,L3,l/L1,L2,L3,j)→110
§55 ↑(i≠55)56 *handle_rule_55(L1,L2,L3,l/L1,L2,L3,j)→110
§56 ↑(i≠56)57 *handle_rule_56(L1,L2,L3,l/L1,L2,L3,j)→110
§57 ↑(i≠57)58 *handle_rule_57(L1,L2,L3,l/L1,L2,L3,j)→110
§58 ↑(i≠58)59 *handle_rule_58(L1,L2,L3,l/L1,L2,L3,j)→110
§59 ↑(i≠59)60 *handle_rule_59(L1,L2,L3,l/L1,L2,L3,j)→110
§60 ↑(i≠60)61 *handle_rule_60(L1,L2,L3,l/L1,L2,L3,j)→110
§61 ↑(i≠61)62 *handle_rule_61(L1,L2,L3,l/L1,L2,L3,j)→110
§62 ↑(i≠62)63 *handle_rule_62(L1,L2,L3,l/L1,L2,L3,j)→110
§63 ↑(i≠63)64 *handle_rule_63(L1,L2,L3,l/L1,L2,L3,j)→110
§64 ↑(i≠64)65 *handle_rule_64(L1,L2,L3,l/L1,L2,L3,j)→110
§65 ↑(i≠65)66 *handle_rule_65(L1,L2,L3,l/L1,L2,L3,j)→110
§66 ↑(i≠66)67 *handle_rule_66(L1,L2,L3,l/L1,L2,L3,j)→110
§67 ↑(i≠67)68 *handle_rule_67(L1,L2,L3,l/L1,L2,L3,j)→110
§68 ↑(i≠68)69 *handle_rule_68(L1,L2,L3,l/L1,L2,L3,j)→110
§69 ↑(i≠69)70 *handle_rule_69(L1,L2,L3,l/L1,L2,L3,j)→110
§70 ↑(i≠70)71 *handle_rule_70(L1,L2,L3,l/L1,L2,L3,j)→110
§71 ↑(i≠71)72 *handle_rule_71(L1,L2,L3,l/L1,L2,L3,j)→110
§72 ↑(i≠72)73 *handle_rule_72(L1,L2,L3,l/L1,L2,L3,j)→110
§73 ↑(i≠73)74 *handle_rule_73(L1,L2,L3,l/L1,L2,L3,j)→110
§74 ↑(i≠74)75 *handle_rule_74(L1,L2,L3,l/L1,L2,L3,j)→110
§75 ↑(i≠75)76 *handle_rule_75(L1,L2,L3,l/L1,L2,L3,j)→110
§76 ↑(i≠76)77 *handle_rule_76(L1,L2,L3,l/L1,L2,L3,j)→110
§77 ↑(i≠77)78 *handle_rule_77(L1,L2,L3,l/L1,L2,L3,j)→110
§78 ↑(i≠78)79 *handle_rule_78(L1,L2,L3,l/L1,L2,L3,j)→110
§79 ↑(i≠79)80 *handle_rule_79(L1,L2,L3,l/L1,L2,L3,j)→110
§80 ↑(i≠80)81 *handle_rule_80(L1,L2,L3,l/L1,L2,L3,j)→110
§81 ↑(i≠81)82 *handle_rule_81(L1,L2,L3,l/L1,L2,L3,j)→110
§82 ↑(i≠82)83 *handle_rule_82(L1,L2,L3,l/L1,L2,L3,j)→110
§83 ↑(i≠83)84 *handle_rule_83(L1,L2,L3,l/L1,L2,L3,j)→110
§84 ↑(i≠84)85 *handle_rule_84(L1,L2,L3,l/L1,L2,L3,j)→110
§85 ↑(i≠85)86 *handle_rule_85(L1,L2,L3,l/L1,L2,L3,j)→110
§86 ↑(i≠86)87 *handle_rule_86(L1,L2,L3,l/L1,L2,L3,j)→110
§87 ↑(i≠87)88 *handle_rule_87(L1,L2,L3,l/L1,L2,L3,j)→110
§88 ↑(i≠88)89 *handle_rule_88(L1,L2,L3,l/L1,L2,L3,j)→110
§89 ↑(i≠89)90 *handle_rule_89(L1,L2,L3,l/L1,L2,L3,j)→110
§90 ↑(i≠90)91 *handle_rule_90(L1,L2,L3,l/L1,L2,L3,j)→110
§91 ↑(i≠91)92 *handle_rule_91(L1,L2,L3,l/L1,L2,L3,j)→110
§92 ↑(i≠92)93 *handle_rule_92(L1,L2,L3,l/L1,L2,L3,j)→110
§93 ↑(i≠93)94 *handle_rule_93(L1,L2,L3,l/L1,L2,L3,j)→110
§94 ↑(i≠94)95 *handle_rule_94(L1,L2,L3,l/L1,L2,L3,j)→110
§95 ↑(i≠95)96 *handle_rule_95(L1,L2,L3,l/L1,L2,L3,j)→110
§96 ↑(i≠96)97 *handle_rule_96(L1,L2,L3,l/L1,L2,L3,j)→110
§97 ↑(i≠97)98 *handle_rule_97(L1,L2,L3,l/L1,L2,L3,j)→110
§98 ↑(i≠98)99 *handle_rule_98(L1,L2,L3,l/L1,L2,L3,j)→110
§99 ↑(i≠99)100 *handle_rule_99(L1,L2,L3,l/L1,L2,L3,j)→110
§100 ↑(i≠100)101 *handle_rule_100(L1,L2,L3,l/L1,L2,L3,j)→110
§101 ↑(i≠101)102 *handle_rule_101(L1,L2,L3,l/L1,L2,L3,j)→110
§102 ↑(i≠102)103 *handle_rule_102(L1,L2,L3,l/L1,L2,L3,j)→110
§103 ↑(i≠103)104 *handle_rule_103(L1,L2,L3,l/L1,L2,L3,j)→110
§104 ↑(i≠104)105 *handle_rule_104(L1,L2,L3,l/L1,L2,L3,j)→110
§105 ↑(i≠105)106 *handle_rule_105(L1,L2,L3,l/L1,L2,L3,j)→110
§106 ↑(i≠106)107 *handle_rule_106(L1,L2,L3,l/L1,L2,L3,j)→110
§107 ↑(i≠107)108 *handle_rule_107(L1,L2,L3,l/L1,L2,L3,j)→110
§108 ↑(i≠108)109 *handle_rule_108(L1,L2,L3,l/L1,L2,L3,j)→110
§109 ↑(i≠109)110 *handle_rule_109(L1,L2,L3,l/L1,L2,L3,j)→110
§110

    *get_m(i/x) x↪255 Q3+4⇒n⇒Q3

    /'Parent node: '>C *writev_line(l/)
    /'Current node: '>C *writev_line(j/)
    n-4⇒l j⇒L3l
    n-3⇒r i⇒L3r
    n-2⇒t 0⇒L3t
    n-1⇒m x⇒L3m
§255
    *free_context_stack(L3/L3)
**
********************************************************************
free_context_stack(L1/L1)
    Q1⇒n↪1
    n-2⇒t L1t⇒t
    n-1⇒m L1m⇒m
    ↑(t<m)1 Q1-4⇒Q1 *free_context_stack(L1/L1)
§1
**
********************************************************************
*** syntax rules handler
*** L1 - tree metadata
*** L2 - tree nodes
*** L3 - context stack
*** i - accepted terminal index
********************************************************************
handle_accepted_terminal(L1,L2,L3,i/L1,L2,L3)
    Q3⇒n-3⇒r L3r⇒r
    Q3⇒n-2⇒t L3t⇒t
    Q3⇒n-4⇒l L3l⇒l
§0 ↑(r≠0)1 *handle_terminal_0(L1,L2,L3,i,t,l/L1,L2,L3)→110
§1 ↑(r≠1)2 *handle_terminal_1(L1,L2,L3,i,t,l/L1,L2,L3)→110
§2 ↑(r≠2)3 *handle_terminal_2(L1,L2,L3,i,t,l/L1,L2,L3)→110
§3 ↑(r≠3)4 *handle_terminal_3(L1,L2,L3,i,t,l/L1,L2,L3)→110
§4 ↑(r≠4)5 *handle_terminal_4(L1,L2,L3,i,t,l/L1,L2,L3)→110
§5 ↑(r≠5)6 *handle_terminal_5(L1,L2,L3,i,t,l/L1,L2,L3)→110
§6 ↑(r≠6)7 *handle_terminal_6(L1,L2,L3,i,t,l/L1,L2,L3)→110
§7 ↑(r≠7)8 *handle_terminal_7(L1,L2,L3,i,t,l/L1,L2,L3)→110
§8 ↑(r≠8)9 *handle_terminal_8(L1,L2,L3,i,t,l/L1,L2,L3)→110
§9 ↑(r≠9)10 *handle_terminal_9(L1,L2,L3,i,t,l/L1,L2,L3)→110
§10 ↑(r≠10)11 *handle_terminal_10(L1,L2,L3,i,t,l/L1,L2,L3)→110
§11 ↑(r≠11)12 *handle_terminal_11(L1,L2,L3,i,t,l/L1,L2,L3)→110
§12 ↑(r≠12)13 *handle_terminal_12(L1,L2,L3,i,t,l/L1,L2,L3)→110
§13 ↑(r≠13)14 *handle_terminal_13(L1,L2,L3,i,t,l/L1,L2,L3)→110
§14 ↑(r≠14)15 *handle_terminal_14(L1,L2,L3,i,t,l/L1,L2,L3)→110
§15 ↑(r≠15)16 *handle_terminal_15(L1,L2,L3,i,t,l/L1,L2,L3)→110
§16 ↑(r≠16)17 *handle_terminal_16(L1,L2,L3,i,t,l/L1,L2,L3)→110
§17 ↑(r≠17)18 *handle_terminal_17(L1,L2,L3,i,t,l/L1,L2,L3)→110
§18 ↑(r≠18)19 *handle_terminal_18(L1,L2,L3,i,t,l/L1,L2,L3)→110
§19 ↑(r≠19)20 *handle_terminal_19(L1,L2,L3,i,t,l/L1,L2,L3)→110
§20 ↑(r≠20)21 *handle_terminal_20(L1,L2,L3,i,t,l/L1,L2,L3)→110
§21 ↑(r≠21)22 *handle_terminal_21(L1,L2,L3,i,t,l/L1,L2,L3)→110
§22 ↑(r≠22)23 *handle_terminal_22(L1,L2,L3,i,t,l/L1,L2,L3)→110
§23 ↑(r≠23)24 *handle_terminal_23(L1,L2,L3,i,t,l/L1,L2,L3)→110
§24 ↑(r≠24)25 *handle_terminal_24(L1,L2,L3,i,t,l/L1,L2,L3)→110
§25 ↑(r≠25)26 *handle_terminal_25(L1,L2,L3,i,t,l/L1,L2,L3)→110
§26 ↑(r≠26)27 *handle_terminal_26(L1,L2,L3,i,t,l/L1,L2,L3)→110
§27 ↑(r≠27)28 *handle_terminal_27(L1,L2,L3,i,t,l/L1,L2,L3)→110
§28 ↑(r≠28)29 *handle_terminal_28(L1,L2,L3,i,t,l/L1,L2,L3)→110
§29 ↑(r≠29)30 *handle_terminal_29(L1,L2,L3,i,t,l/L1,L2,L3)→110
§30 ↑(r≠30)31 *handle_terminal_30(L1,L2,L3,i,t,l/L1,L2,L3)→110
§31 ↑(r≠31)32 *handle_terminal_31(L1,L2,L3,i,t,l/L1,L2,L3)→110
§32 ↑(r≠32)33 *handle_terminal_32(L1,L2,L3,i,t,l/L1,L2,L3)→110
§33 ↑(r≠33)34 *handle_terminal_33(L1,L2,L3,i,t,l/L1,L2,L3)→110
§34 ↑(r≠34)35 *handle_terminal_34(L1,L2,L3,i,t,l/L1,L2,L3)→110
§35 ↑(r≠35)36 *handle_terminal_35(L1,L2,L3,i,t,l/L1,L2,L3)→110
§36 ↑(r≠36)37 *handle_terminal_36(L1,L2,L3,i,t,l/L1,L2,L3)→110
§37 ↑(r≠37)38 *handle_terminal_37(L1,L2,L3,i,t,l/L1,L2,L3)→110
§38 ↑(r≠38)39 *handle_terminal_38(L1,L2,L3,i,t,l/L1,L2,L3)→110
§39 ↑(r≠39)40 *handle_terminal_39(L1,L2,L3,i,t,l/L1,L2,L3)→110
§40 ↑(r≠40)41 *handle_terminal_40(L1,L2,L3,i,t,l/L1,L2,L3)→110
§41 ↑(r≠41)42 *handle_terminal_41(L1,L2,L3,i,t,l/L1,L2,L3)→110
§42 ↑(r≠42)43 *handle_terminal_42(L1,L2,L3,i,t,l/L1,L2,L3)→110
§43 ↑(r≠43)44 *handle_terminal_43(L1,L2,L3,i,t,l/L1,L2,L3)→110
§44 ↑(r≠44)45 *handle_terminal_44(L1,L2,L3,i,t,l/L1,L2,L3)→110
§45 ↑(r≠45)46 *handle_terminal_45(L1,L2,L3,i,t,l/L1,L2,L3)→110
§46 ↑(r≠46)47 *handle_terminal_46(L1,L2,L3,i,t,l/L1,L2,L3)→110
§47 ↑(r≠47)48 *handle_terminal_47(L1,L2,L3,i,t,l/L1,L2,L3)→110
§48 ↑(r≠48)49 *handle_terminal_48(L1,L2,L3,i,t,l/L1,L2,L3)→110
§49 ↑(r≠49)50 *handle_terminal_49(L1,L2,L3,i,t,l/L1,L2,L3)→110
§50 ↑(r≠50)51 *handle_terminal_50(L1,L2,L3,i,t,l/L1,L2,L3)→110
§51 ↑(r≠51)52 *handle_terminal_51(L1,L2,L3,i,t,l/L1,L2,L3)→110
§52 ↑(r≠52)53 *handle_terminal_52(L1,L2,L3,i,t,l/L1,L2,L3)→110
§53 ↑(r≠53)54 *handle_terminal_53(L1,L2,L3,i,t,l/L1,L2,L3)→110
§54 ↑(r≠54)55 *handle_terminal_54(L1,L2,L3,i,t,l/L1,L2,L3)→110
§55 ↑(r≠55)56 *handle_terminal_55(L1,L2,L3,i,t,l/L1,L2,L3)→110
§56 ↑(r≠56)57 *handle_terminal_56(L1,L2,L3,i,t,l/L1,L2,L3)→110
§57 ↑(r≠57)58 *handle_terminal_57(L1,L2,L3,i,t,l/L1,L2,L3)→110
§58 ↑(r≠58)59 *handle_terminal_58(L1,L2,L3,i,t,l/L1,L2,L3)→110
§59 ↑(r≠59)60 *handle_terminal_59(L1,L2,L3,i,t,l/L1,L2,L3)→110
§60 ↑(r≠60)61 *handle_terminal_60(L1,L2,L3,i,t,l/L1,L2,L3)→110
§61 ↑(r≠61)62 *handle_terminal_61(L1,L2,L3,i,t,l/L1,L2,L3)→110
§62 ↑(r≠62)63 *handle_terminal_62(L1,L2,L3,i,t,l/L1,L2,L3)→110
§63 ↑(r≠63)64 *handle_terminal_63(L1,L2,L3,i,t,l/L1,L2,L3)→110
§64 ↑(r≠64)65 *handle_terminal_64(L1,L2,L3,i,t,l/L1,L2,L3)→110
§65 ↑(r≠65)66 *handle_terminal_65(L1,L2,L3,i,t,l/L1,L2,L3)→110
§66 ↑(r≠66)67 *handle_terminal_66(L1,L2,L3,i,t,l/L1,L2,L3)→110
§67 ↑(r≠67)68 *handle_terminal_67(L1,L2,L3,i,t,l/L1,L2,L3)→110
§68 ↑(r≠68)69 *handle_terminal_68(L1,L2,L3,i,t,l/L1,L2,L3)→110
§69 ↑(r≠69)70 *handle_terminal_69(L1,L2,L3,i,t,l/L1,L2,L3)→110
§70 ↑(r≠70)71 *handle_terminal_70(L1,L2,L3,i,t,l/L1,L2,L3)→110
§71 ↑(r≠71)72 *handle_terminal_71(L1,L2,L3,i,t,l/L1,L2,L3)→110
§72 ↑(r≠72)73 *handle_terminal_72(L1,L2,L3,i,t,l/L1,L2,L3)→110
§73 ↑(r≠73)74 *handle_terminal_73(L1,L2,L3,i,t,l/L1,L2,L3)→110
§74 ↑(r≠74)75 *handle_terminal_74(L1,L2,L3,i,t,l/L1,L2,L3)→110
§75 ↑(r≠75)76 *handle_terminal_75(L1,L2,L3,i,t,l/L1,L2,L3)→110
§76 ↑(r≠76)77 *handle_terminal_76(L1,L2,L3,i,t,l/L1,L2,L3)→110
§77 ↑(r≠77)78 *handle_terminal_77(L1,L2,L3,i,t,l/L1,L2,L3)→110
§78 ↑(r≠78)79 *handle_terminal_78(L1,L2,L3,i,t,l/L1,L2,L3)→110
§79 ↑(r≠79)80 *handle_terminal_79(L1,L2,L3,i,t,l/L1,L2,L3)→110
§80 ↑(r≠80)81 *handle_terminal_80(L1,L2,L3,i,t,l/L1,L2,L3)→110
§81 ↑(r≠81)82 *handle_terminal_81(L1,L2,L3,i,t,l/L1,L2,L3)→110
§82 ↑(r≠82)83 *handle_terminal_82(L1,L2,L3,i,t,l/L1,L2,L3)→110
§83 ↑(r≠83)84 *handle_terminal_83(L1,L2,L3,i,t,l/L1,L2,L3)→110
§84 ↑(r≠84)85 *handle_terminal_84(L1,L2,L3,i,t,l/L1,L2,L3)→110
§85 ↑(r≠85)86 *handle_terminal_85(L1,L2,L3,i,t,l/L1,L2,L3)→110
§86 ↑(r≠86)87 *handle_terminal_86(L1,L2,L3,i,t,l/L1,L2,L3)→110
§87 ↑(r≠87)88 *handle_terminal_87(L1,L2,L3,i,t,l/L1,L2,L3)→110
§88 ↑(r≠88)89 *handle_terminal_88(L1,L2,L3,i,t,l/L1,L2,L3)→110
§89 ↑(r≠89)90 *handle_terminal_89(L1,L2,L3,i,t,l/L1,L2,L3)→110
§90 ↑(r≠90)91 *handle_terminal_90(L1,L2,L3,i,t,l/L1,L2,L3)→110
§91 ↑(r≠91)92 *handle_terminal_91(L1,L2,L3,i,t,l/L1,L2,L3)→110
§92 ↑(r≠92)93 *handle_terminal_92(L1,L2,L3,i,t,l/L1,L2,L3)→110
§93 ↑(r≠93)94 *handle_terminal_93(L1,L2,L3,i,t,l/L1,L2,L3)→110
§94 ↑(r≠94)95 *handle_terminal_94(L1,L2,L3,i,t,l/L1,L2,L3)→110
§95 ↑(r≠95)96 *handle_terminal_95(L1,L2,L3,i,t,l/L1,L2,L3)→110
§96 ↑(r≠96)97 *handle_terminal_96(L1,L2,L3,i,t,l/L1,L2,L3)→110
§97 ↑(r≠97)98 *handle_terminal_97(L1,L2,L3,i,t,l/L1,L2,L3)→110
§98 ↑(r≠98)99 *handle_terminal_98(L1,L2,L3,i,t,l/L1,L2,L3)→110
§99 ↑(r≠99)100 *handle_terminal_99(L1,L2,L3,i,t,l/L1,L2,L3)→110
§100 ↑(r≠100)101 *handle_terminal_100(L1,L2,L3,i,t,l/L1,L2,L3)→110
§101 ↑(r≠101)102 *handle_terminal_101(L1,L2,L3,i,t,l/L1,L2,L3)→110
§102 ↑(r≠102)103 *handle_terminal_102(L1,L2,L3,i,t,l/L1,L2,L3)→110
§103 ↑(r≠103)104 *handle_terminal_103(L1,L2,L3,i,t,l/L1,L2,L3)→110
§104 ↑(r≠104)105 *handle_terminal_104(L1,L2,L3,i,t,l/L1,L2,L3)→110
§105 ↑(r≠105)106 *handle_terminal_105(L1,L2,L3,i,t,l/L1,L2,L3)→110
§106 ↑(r≠106)107 *handle_terminal_106(L1,L2,L3,i,t,l/L1,L2,L3)→110
§107 ↑(r≠107)108 *handle_terminal_107(L1,L2,L3,i,t,l/L1,L2,L3)→110
§108 ↑(r≠108)109 *handle_terminal_108(L1,L2,L3,i,t,l/L1,L2,L3)→110
§109 ↑(r≠109)110 *handle_terminal_109(L1,L2,L3,i,t,l/L1,L2,L3)→110
§110
    Q3-2⇒t L3t⇒x+1⇒L3t
    *free_context_stack(L3/L3)
**
********************************************************************
get_m(i/m)
§0 ↑(i≠0)1 4⇒m→110
§1 ↑(i≠1)2 0⇒m→110
§2 ↑(i≠2)3 1⇒m→110
§3 ↑(i≠3)4 6⇒m→110
§4 ↑(i≠4)5 1⇒m→110
§5 ↑(i≠5)6 2⇒m→110
§6 ↑(i≠6)7 0⇒m→110
§7 ↑(i≠7)8 3⇒m→110
§8 ↑(i≠8)9 0⇒m→110
§9 ↑(i≠9)10 1⇒m→110
§10 ↑(i≠10)11 1⇒m→110
§11 ↑(i≠11)12 2⇒m→110
§12 ↑(i≠12)13 0⇒m→110
§13 ↑(i≠13)14 3⇒m→110
§14 ↑(i≠14)15 0⇒m→110
§15 ↑(i≠15)16 1⇒m→110
§16 ↑(i≠16)17 1⇒m→110
§17 ↑(i≠17)18 2⇒m→110
§18 ↑(i≠18)19 0⇒m→110
§19 ↑(i≠19)20 2⇒m→110
§20 ↑(i≠20)21 0⇒m→110
§21 ↑(i≠21)22 2⇒m→110
§22 ↑(i≠22)23 1⇒m→110
§23 ↑(i≠23)24 2⇒m→110
§24 ↑(i≠24)25 4⇒m→110
§25 ↑(i≠25)26 2⇒m→110
§26 ↑(i≠26)27 2⇒m→110
§27 ↑(i≠27)28 1⇒m→110
§28 ↑(i≠28)29 1⇒m→110
§29 ↑(i≠29)30 1⇒m→110
§30 ↑(i≠30)31 2⇒m→110
§31 ↑(i≠31)32 2⇒m→110
§32 ↑(i≠32)33 2⇒m→110
§33 ↑(i≠33)34 2⇒m→110
§34 ↑(i≠34)35 2⇒m→110
§35 ↑(i≠35)36 2⇒m→110
§36 ↑(i≠36)37 7⇒m→110
§37 ↑(i≠37)38 2⇒m→110
§38 ↑(i≠38)39 2⇒m→110
§39 ↑(i≠39)40 6⇒m→110
§40 ↑(i≠40)41 1⇒m→110
§41 ↑(i≠41)42 2⇒m→110
§42 ↑(i≠42)43 2⇒m→110
§43 ↑(i≠43)44 3⇒m→110
§44 ↑(i≠44)45 1⇒m→110
§45 ↑(i≠45)46 2⇒m→110
§46 ↑(i≠46)47 1⇒m→110
§47 ↑(i≠47)48 5⇒m→110
§48 ↑(i≠48)49 2⇒m→110
§49 ↑(i≠49)50 3⇒m→110
§50 ↑(i≠50)51 2⇒m→110
§51 ↑(i≠51)52 3⇒m→110
§52 ↑(i≠52)53 1⇒m→110
§53 ↑(i≠53)54 2⇒m→110
§54 ↑(i≠54)55 1⇒m→110
§55 ↑(i≠55)56 1⇒m→110
§56 ↑(i≠56)57 1⇒m→110
§57 ↑(i≠57)58 1⇒m→110
§58 ↑(i≠58)59 1⇒m→110
§59 ↑(i≠59)60 1⇒m→110
§60 ↑(i≠60)61 1⇒m→110
§61 ↑(i≠61)62 2⇒m→110
§62 ↑(i≠62)63 1⇒m→110
§63 ↑(i≠63)64 1⇒m→110
§64 ↑(i≠64)65 1⇒m→110
§65 ↑(i≠65)66 1⇒m→110
§66 ↑(i≠66)67 1⇒m→110
§67 ↑(i≠67)68 1⇒m→110
§68 ↑(i≠68)69 1⇒m→110
§69 ↑(i≠69)70 1⇒m→110
§70 ↑(i≠70)71 1⇒m→110
§71 ↑(i≠71)72 1⇒m→110
§72 ↑(i≠72)73 1⇒m→110
§73 ↑(i≠73)74 1⇒m→110
§74 ↑(i≠74)75 1⇒m→110
§75 ↑(i≠75)76 1⇒m→110
§76 ↑(i≠76)77 1⇒m→110
§77 ↑(i≠77)78 1⇒m→110
§78 ↑(i≠78)79 1⇒m→110
§79 ↑(i≠79)80 1⇒m→110
§80 ↑(i≠80)81 1⇒m→110
§81 ↑(i≠81)82 1⇒m→110
§82 ↑(i≠82)83 1⇒m→110
§83 ↑(i≠83)84 1⇒m→110
§84 ↑(i≠84)85 1⇒m→110
§85 ↑(i≠85)86 2⇒m→110
§86 ↑(i≠86)87 1⇒m→110
§87 ↑(i≠87)88 1⇒m→110
§88 ↑(i≠88)89 2⇒m→110
§89 ↑(i≠89)90 0⇒m→110
§90 ↑(i≠90)91 3⇒m→110
§91 ↑(i≠91)92 0⇒m→110
§92 ↑(i≠92)93 1⇒m→110
§93 ↑(i≠93)94 1⇒m→110
§94 ↑(i≠94)95 2⇒m→110
§95 ↑(i≠95)96 2⇒m→110
§96 ↑(i≠96)97 0⇒m→110
§97 ↑(i≠97)98 3⇒m→110
§98 ↑(i≠98)99 0⇒m→110
§99 ↑(i≠99)100 1⇒m→110
§100 ↑(i≠100)101 2⇒m→110
§101 ↑(i≠101)102 2⇒m→110
§102 ↑(i≠102)103 1⇒m→110
§103 ↑(i≠103)104 0⇒m→110
§104 ↑(i≠104)105 1⇒m→110
§105 ↑(i≠105)106 2⇒m→110
§106 ↑(i≠106)107 1⇒m→110
§107 ↑(i≠107)108 2⇒m→110
§108 ↑(i≠108)109 1⇒m→110
§109 ↑(i≠109)110 2⇒m→110
§110

**
********************************************************************
#add_node(L1,L2,p,i,v/L1,L2,n)
#get_node_info(L1,L2,n/i,v)
#get_node_child_count(L1,L2,n/c)
#get_child_node_index(L1,L2,p,j/i)
#get_parent_node_index(L1,L2,n/p)
#update_node_info(L1,L2,n,i,v/)
#writev_line(a/)
********************************************************************

handle_rule_0(L1,L2,L3,n/L1,L2,L3,j) *** SUBPROGRAM -> HEAD BODY RET SUBPROGRAM
    *add_node(L1,L2,n,0,0/L1,L2,j)
    *add_node(L1,L2,j,1,0/L1,L2,x)
    *add_node(L1,L2,j,2,0/L1,L2,x)
    *add_node(L1,L2,j,3,0/L1,L2,x)
    *add_node(L1,L2,j,4,0/L1,L2,x)
**
handle_rule_1(L1,L2,L3,n/L1,L2,L3,j) *** SUBPROGRAM -> ε
**
handle_rule_2(L1,L2,L3,n/L1,L2,L3,j) *** RET -> **
    *add_node(L1,L2,n,5,0/L1,L2,j)
**
handle_rule_3(L1,L2,L3,n/L1,L2,L3,j) *** HEAD -> NAME ( INARGS / OUTARGS )
    n⇒j
**
handle_rule_4(L1,L2,L3,n/L1,L2,L3,j) *** NAME -> name
    *get_child_node_index(L1,L2,n,0/j)
**
handle_rule_5(L1,L2,L3,n/L1,L2,L3,j) *** INARGS -> INARG NEXTINARG
    *get_child_node_index(L1,L2,n,1/j)
**
handle_rule_6(L1,L2,L3,n/L1,L2,L3,j) *** INARGS -> ε
**
handle_rule_7(L1,L2,L3,n/L1,L2,L3,j) *** NEXTINARG -> , INARG NEXTINARG
    n⇒j
**
handle_rule_8(L1,L2,L3,n/L1,L2,L3,j) *** NEXTINARG -> ε
**
handle_rule_9(L1,L2,L3,n/L1,L2,L3,j) *** INARG -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_10(L1,L2,L3,n/L1,L2,L3,j) *** INARG -> complex
    *add_node(L1,L2,n,7,0/L1,L2,j)
**
handle_rule_11(L1,L2,L3,n/L1,L2,L3,j) *** OUTARGS -> OUTARG NEXTOUTARG
    *get_child_node_index(L1,L2,n,2/j)
**
handle_rule_12(L1,L2,L3,n/L1,L2,L3,j) *** OUTARGS -> ε
**
handle_rule_13(L1,L2,L3,n/L1,L2,L3,j) *** NEXTOUTARG -> , OUTARG NEXTOUTARG
    n⇒j
**
handle_rule_14(L1,L2,L3,n/L1,L2,L3,j) *** NEXTOUTARG -> ε
**
handle_rule_15(L1,L2,L3,n/L1,L2,L3,j) *** OUTARG -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_16(L1,L2,L3,n/L1,L2,L3,j) *** OUTARG -> complex
    *add_node(L1,L2,n,7,0/L1,L2,j)
**
handle_rule_17(L1,L2,L3,n/L1,L2,L3,j) *** BODY -> EXPR NEXTEXPR
    *get_child_node_index(L1,L2,n,3/j)
**
handle_rule_18(L1,L2,L3,n/L1,L2,L3,j) *** BODY -> ε
**
handle_rule_19(L1,L2,L3,n/L1,L2,L3,j) *** NEXTEXPR -> EXPR NEXTEXPR
    n⇒j
**
handle_rule_20(L1,L2,L3,n/L1,L2,L3,j) *** NEXTEXPR -> ε
**
handle_rule_21(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> assign ASSIGNABLEOPERAND
    *add_node(L1,L2,n,18,0/L1,L2,j)
**
handle_rule_22(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> OPERAND
    *add_node(L1,L2,n,25,0/L1,L2,j)
**
handle_rule_23(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> complex INDEX
    *add_node(L1,L2,n,25,0/L1,L2,x)
    *add_node(L1,L2,x,8,0/L1,L2,j)
**
handle_rule_24(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> swap ( SWAPEXPR )
    *add_node(L1,L2,n,19,0/L1,L2,j)
**
handle_rule_25(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> zeroing ASSIGNABLEOPERAND
    *add_node(L1,L2,n,20,0/L1,L2,j)
**
handle_rule_26(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> maximize ASSIGNABLEOPERAND
    *add_node(L1,L2,n,21,0/L1,L2,j)
**
handle_rule_27(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> lowerone
    *add_node(L1,L2,n,22,0/L1,L2,j)
**
handle_rule_28(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> inversion
    *add_node(L1,L2,n,23,0/L1,L2,j)
**
handle_rule_29(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> weighing
    *add_node(L1,L2,n,24,0/L1,L2,j)
**
handle_rule_30(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> ARITHMETICOP ARITHMETICOPERAND
    *add_node(L1,L2,n,0,0/L1,L2,j)
**
handle_rule_31(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> * STAREXPR
    n⇒j
**
handle_rule_32(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> / SLASHEXPR
    n⇒j
**
handle_rule_33(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> inc ASSIGNABLEOPERAND
    *add_node(L1,L2,n,28,0/L1,L2,j)
**
handle_rule_34(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> dec ASSIGNABLEOPERAND
    *add_node(L1,L2,n,29,0/L1,L2,j)
**
handle_rule_35(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> JUMPOP const
    *add_node(L1,L2,n,0,0/L1,L2,x)
    *add_node(L1,L2,x,9,0/L1,L2,j)
**
handle_rule_36(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> cmp ( LEFTCONDITIONOPERAND CONDITIONOP RIGHTCONDITIONOPERAND ) const
    *add_node(L1,L2,n,33,0/L1,L2,j)
**
handle_rule_37(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> par const
    *add_node(L1,L2,n,34,0/L1,L2,x)
    *add_node(L1,L2,x,9,0/L1,L2,j)
**
handle_rule_38(L1,L2,L3,n/L1,L2,L3,j) *** EXPR -> at COMPLEXEXPR
    n⇒j
**
handle_rule_39(L1,L2,L3,n/L1,L2,L3,j) *** STAREXPR -> name ( CALLINARGS / CALLOUTARGS )
    *add_node(L1,L2,n,50,0/L1,L2,j)
    *add_node(L1,L2,j,1,0/L1,L2,x)
    *add_node(L1,L2,j,2,0/L1,L2,x)
    *add_node(L1,L2,j,3,0/L1,L2,x)
**
handle_rule_40(L1,L2,L3,n/L1,L2,L3,j) *** STAREXPR -> OPERAND
    *add_node(L1,L2,n,12,0/L1,L2,j)
**
handle_rule_41(L1,L2,L3,n/L1,L2,L3,j) *** STAREXPR -> complex INDEX
    *add_node(L1,L2,n,12,0/L1,L2,x)
    *add_node(L1,L2,x,8,0/L1,L2,j)
**
handle_rule_42(L1,L2,L3,n/L1,L2,L3,j) *** SLASHEXPR -> complex COMPLEXSLASHEXPR
    *add_node(L1,L2,n,0,0/L1,L2,x)
    *add_node(L1,L2,x,0,0/L1,L2,j)
**
handle_rule_43(L1,L2,L3,n/L1,L2,L3,j) *** SLASHEXPR -> string CONSOLEACTION console
    *add_node(L1,L2,n,51,0/L1,L2,j)
    *add_node(L1,L2,j,38,0/L1,L2,x)
**
handle_rule_44(L1,L2,L3,n/L1,L2,L3,j) *** SLASHEXPR -> OPERAND
    *add_node(L1,L2,n,13,0/L1,L2,j)
**
handle_rule_45(L1,L2,L3,n/L1,L2,L3,j) *** COMPLEXSLASHEXPR -> CONSOLEACTION console
    *get_node_info(L1,L2,n/x,v)
    *update_node_info(L1,L2,n,7,v/)
    *get_parent_node_index(L1,L2,n/j)
    *update_node_info(L1,L2,j,50,0/)
**
handle_rule_46(L1,L2,L3,n/L1,L2,L3,j) *** COMPLEXSLASHEXPR -> INDEX
    *get_node_info(L1,L2,n/x,v)
    *update_node_info(L1,L2,n,8,v/)
    *get_parent_node_index(L1,L2,n/p)
    *update_node_info(L1,L2,p,13,0/)
    n⇒j
**
handle_rule_47(L1,L2,L3,n/L1,L2,L3,j) *** COMPLEXEXPR -> + complex ( const )
    *add_node(L1,L2,n,35,0/L1,L2,j)
    *add_node(L1,L2,j,7,0/L1,L2,x)
    *add_node(L1,L2,j,9,0/L1,L2,x)
**
handle_rule_48(L1,L2,L3,n/L1,L2,L3,j) *** COMPLEXEXPR -> zeroing complex
    *add_node(L1,L2,n,36,0/L1,L2,x)
    *add_node(L1,L2,x,7,0/L1,L2,j)
**
handle_rule_49(L1,L2,L3,n/L1,L2,L3,j) *** COMPLEXEXPR -> string g complex
    *add_node(L1,L2,n,37,0/L1,L2,j)
    *add_node(L1,L2,j,38,0/L1,L2,x)
    *add_node(L1,L2,j,7,0/L1,L2,x)
**
handle_rule_50(L1,L2,L3,n/L1,L2,L3,j) *** SWAPEXPR -> id id
    *add_node(L1,L2,n,6,0/L1,L2,x)
    *add_node(L1,L2,n,6,0/L1,L2,x)
    n⇒j
**
handle_rule_51(L1,L2,L3,n/L1,L2,L3,j) *** SWAPEXPR -> complex SWAPFIRST SWAPSECOND
    *add_node(L1,L2,n,7,0/L1,L2,x)
    *add_node(L1,L2,n,0,0/L1,L2,x)
    *add_node(L1,L2,n,0,0/L1,L2,x)
    n⇒j
**
handle_rule_52(L1,L2,L3,n/L1,L2,L3,j) *** SWAPFIRST -> id
    *get_child_node_index(L1,L2,n,1/j)
**
handle_rule_53(L1,L2,L3,n/L1,L2,L3,j) *** SWAPFIRST -> . const
    *get_child_node_index(L1,L2,n,1/j)
**
handle_rule_54(L1,L2,L3,n/L1,L2,L3,j) *** SWAPSECOND -> id
    *get_child_node_index(L1,L2,n,2/j)
**
handle_rule_55(L1,L2,L3,n/L1,L2,L3,j) *** SWAPSECOND -> const
    *get_child_node_index(L1,L2,n,2/j)
**
handle_rule_56(L1,L2,L3,n/L1,L2,L3,j) *** CONSOLEACTION -> l
    *add_node(L1,L2,n,51,0/L1,L2,j)
**
handle_rule_57(L1,L2,L3,n/L1,L2,L3,j) *** CONSOLEACTION -> g
    *add_node(L1,L2,n,52,0/L1,L2,j)
**
handle_rule_58(L1,L2,L3,n/L1,L2,L3,j) *** JUMPOP -> jz
    *get_parent_node_index(L1,L2,n/j)
    *update_node_info(L1,L2,j,30,0/)
**
handle_rule_59(L1,L2,L3,n/L1,L2,L3,j) *** JUMPOP -> jnz
    *get_parent_node_index(L1,L2,n/j)
    *update_node_info(L1,L2,j,31,0/)
**
handle_rule_60(L1,L2,L3,n/L1,L2,L3,j) *** JUMPOP -> jump
    *get_parent_node_index(L1,L2,n/j)
    *update_node_info(L1,L2,j,32,0/)
**
handle_rule_61(L1,L2,L3,n/L1,L2,L3,j) *** INDEX -> . const
    *add_node(L1,L2,n,9,0/L1,L2,j)
**
handle_rule_62(L1,L2,L3,n/L1,L2,L3,j) *** INDEX -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_63(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> +
    *update_node_info(L1,L2,n,10,0/)
    n⇒j
**
handle_rule_64(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> -
    *update_node_info(L1,L2,n,11,0/)
    n⇒j
**
handle_rule_65(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> ;
    *update_node_info(L1,L2,n,14,0/)
    n⇒j
**
handle_rule_66(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> and
    *update_node_info(L1,L2,n,16,0/)
    n⇒j
**
handle_rule_67(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> or
    *update_node_info(L1,L2,n,15,0/)
    n⇒j
**
handle_rule_68(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> xor
    *update_node_info(L1,L2,n,17,0/)
    n⇒j
**
handle_rule_69(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> g
    *update_node_info(L1,L2,n,27,0/)
    n⇒j
**
handle_rule_70(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOP -> l
    *update_node_info(L1,L2,n,26,0/)
    n⇒j
**
handle_rule_71(L1,L2,L3,n/L1,L2,L3,j) *** CONDITIONOP -> e
    *add_node(L1,L2,n,44,0/L1,L2,j)
**
handle_rule_72(L1,L2,L3,n/L1,L2,L3,j) *** CONDITIONOP -> ne
    *add_node(L1,L2,n,45,0/L1,L2,j)
**
handle_rule_73(L1,L2,L3,n/L1,L2,L3,j) *** CONDITIONOP -> g
    *add_node(L1,L2,n,46,0/L1,L2,j)
**
handle_rule_74(L1,L2,L3,n/L1,L2,L3,j) *** CONDITIONOP -> ge
    *add_node(L1,L2,n,47,0/L1,L2,j)
**
handle_rule_75(L1,L2,L3,n/L1,L2,L3,j) *** CONDITIONOP -> l
    *add_node(L1,L2,n,48,0/L1,L2,j)
**
handle_rule_76(L1,L2,L3,n/L1,L2,L3,j) *** CONDITIONOP -> le
    *add_node(L1,L2,n,49,0/L1,L2,j)
**
handle_rule_77(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_78(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> const
    *add_node(L1,L2,n,9,0/L1,L2,j)
**
handle_rule_79(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> length
    *add_node(L1,L2,n,39,0/L1,L2,j)
**
handle_rule_80(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> capacity
    *add_node(L1,L2,n,40,0/L1,L2,j)
**
handle_rule_81(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> random
    *add_node(L1,L2,n,41,0/L1,L2,j)
**
handle_rule_82(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> singleconst
    *add_node(L1,L2,n,42,0/L1,L2,j)
**
handle_rule_83(L1,L2,L3,n/L1,L2,L3,j) *** OPERAND -> time
    *add_node(L1,L2,n,43,0/L1,L2,j)
**
handle_rule_84(L1,L2,L3,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_85(L1,L2,L3,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> complex INDEX
    *add_node(L1,L2,n,8,0/L1,L2,j)
**
handle_rule_86(L1,L2,L3,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> length
    *add_node(L1,L2,n,39,0/L1,L2,j)
**
handle_rule_87(L1,L2,L3,n/L1,L2,L3,j) *** ASSIGNABLEOPERAND -> random
    *add_node(L1,L2,n,41,0/L1,L2,j)
**
handle_rule_88(L1,L2,L3,n/L1,L2,L3,j) *** CALLINARGS -> CALLINARG NEXTCALLINARG
    *get_child_node_index(L1,L2,n,1/j)
**
handle_rule_89(L1,L2,L3,n/L1,L2,L3,j) *** CALLINARGS -> ε
    n⇒j
**
handle_rule_90(L1,L2,L3,n/L1,L2,L3,j) *** NEXTCALLINARG -> , CALLINARG NEXTCALLINARG
    n⇒j
**
handle_rule_91(L1,L2,L3,n/L1,L2,L3,j) *** NEXTCALLINARG -> ε
    n⇒j
**
handle_rule_92(L1,L2,L3,n/L1,L2,L3,j) *** CALLINARG -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_93(L1,L2,L3,n/L1,L2,L3,j) *** CALLINARG -> const
    *add_node(L1,L2,n,9,0/L1,L2,j)
**
handle_rule_94(L1,L2,L3,n/L1,L2,L3,j) *** CALLINARG -> complex CALLINDEX
    *add_node(L1,L2,n,0,0/L1,L2,j)
**
handle_rule_95(L1,L2,L3,n/L1,L2,L3,j) *** CALLOUTARGS -> CALLOUTARG NEXTCALLOUTARG
    *get_child_node_index(L1,L2,n,2/j)
**
handle_rule_96(L1,L2,L3,n/L1,L2,L3,j) *** CALLOUTARGS -> ε
    n⇒j
**
handle_rule_97(L1,L2,L3,n/L1,L2,L3,j) *** NEXTCALLOUTARG -> , CALLOUTARG NEXTCALLOUTARG
    n⇒j
**
handle_rule_98(L1,L2,L3,n/L1,L2,L3,j) *** NEXTCALLOUTARG -> ε
    n⇒j
**
handle_rule_99(L1,L2,L3,n/L1,L2,L3,j) *** CALLOUTARG -> id
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_100(L1,L2,L3,n/L1,L2,L3,j) *** CALLOUTARG -> complex CALLINDEX
    *add_node(L1,L2,n,0,0/L1,L2,j)
**
handle_rule_101(L1,L2,L3,n/L1,L2,L3,j) *** CALLINDEX -> . const
    *get_node_info(L1,L2,n/i,v)
    *update_node_info(L1,L2,n,8,v/)
    *add_node(L1,L2,n,9,0/L1,L2,j)
**
handle_rule_102(L1,L2,L3,n/L1,L2,L3,j) *** CALLINDEX -> id
    *get_node_info(L1,L2,n/i,v)
    *update_node_info(L1,L2,n,8,v/)
    *add_node(L1,L2,n,6,0/L1,L2,j)
**
handle_rule_103(L1,L2,L3,n/L1,L2,L3,j) *** CALLINDEX -> ε
    *get_node_info(L1,L2,n/i,v)
    *update_node_info(L1,L2,n,7,v/)
    n⇒j
**
handle_rule_104(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOPERAND -> OPERAND
    n⇒j
**
handle_rule_105(L1,L2,L3,n/L1,L2,L3,j) *** ARITHMETICOPERAND -> complex INDEX
    *add_node(L1,L2,n,8,0/L1,L2,j)
**
handle_rule_106(L1,L2,L3,n/L1,L2,L3,j) *** LEFTCONDITIONOPERAND -> OPERAND
    n⇒j
**
handle_rule_107(L1,L2,L3,n/L1,L2,L3,j) *** LEFTCONDITIONOPERAND -> complex INDEX
    *add_node(L1,L2,n,8,0/L1,L2,j)
**
handle_rule_108(L1,L2,L3,n/L1,L2,L3,j) *** RIGHTCONDITIONOPERAND -> OPERAND
    n⇒j
**
handle_rule_109(L1,L2,L3,n/L1,L2,L3,j) *** RIGHTCONDITIONOPERAND -> complex INDEX
    *add_node(L1,L2,n,8,0/L1,L2,j)
**
handle_terminal_0(L1,L2,L3,i,t,n/L1,L2,L3) *** SUBPROGRAM -> HEAD BODY RET SUBPROGRAM
**
handle_terminal_1(L1,L2,L3,i,t,n/L1,L2,L3) *** SUBPROGRAM -> ε
**
handle_terminal_2(L1,L2,L3,i,t,n/L1,L2,L3) *** RET -> **
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_3(L1,L2,L3,i,t,n/L1,L2,L3) *** HEAD -> NAME ( INARGS / OUTARGS )
**
handle_terminal_4(L1,L2,L3,i,t,n/L1,L2,L3) *** NAME -> name
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_5(L1,L2,L3,i,t,n/L1,L2,L3) *** INARGS -> INARG NEXTINARG
**
handle_terminal_6(L1,L2,L3,i,t,n/L1,L2,L3) *** INARGS -> ε
**
handle_terminal_7(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTINARG -> , INARG NEXTINARG
**
handle_terminal_8(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTINARG -> ε
**
handle_terminal_9(L1,L2,L3,i,t,n/L1,L2,L3) *** INARG -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_10(L1,L2,L3,i,t,n/L1,L2,L3) *** INARG -> complex
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_11(L1,L2,L3,i,t,n/L1,L2,L3) *** OUTARGS -> OUTARG NEXTOUTARG
**
handle_terminal_12(L1,L2,L3,i,t,n/L1,L2,L3) *** OUTARGS -> ε
**
handle_terminal_13(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTOUTARG -> , OUTARG NEXTOUTARG
**
handle_terminal_14(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTOUTARG -> ε
**
handle_terminal_15(L1,L2,L3,i,t,n/L1,L2,L3) *** OUTARG -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_16(L1,L2,L3,i,t,n/L1,L2,L3) *** OUTARG -> complex
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_17(L1,L2,L3,i,t,n/L1,L2,L3) *** BODY -> EXPR NEXTEXPR
**
handle_terminal_18(L1,L2,L3,i,t,n/L1,L2,L3) *** BODY -> ε
**
handle_terminal_19(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTEXPR -> EXPR NEXTEXPR
**
handle_terminal_20(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTEXPR -> ε
**
handle_terminal_21(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> assign ASSIGNABLEOPERAND
**
handle_terminal_22(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> OPERAND
**
handle_terminal_23(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> complex INDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_24(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> swap ( SWAPEXPR )
**
handle_terminal_25(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> zeroing ASSIGNABLEOPERAND
**
handle_terminal_26(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> maximize ASSIGNABLEOPERAND
**
handle_terminal_27(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> lowerone
**
handle_terminal_28(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> inversion
**
handle_terminal_29(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> weighing
**
handle_terminal_30(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> ARITHMETICOP ARITHMETICOPERAND
**
handle_terminal_31(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> * STAREXPR
**
handle_terminal_32(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> / SLASHEXPR
**
handle_terminal_33(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> inc ASSIGNABLEOPERAND
**
handle_terminal_34(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> dec ASSIGNABLEOPERAND
**
handle_terminal_35(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> JUMPOP const
    ↑(t≠1)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_36(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> cmp ( LEFTCONDITIONOPERAND CONDITIONOP RIGHTCONDITIONOPERAND ) const
    ↑(t≠6)1
    *add_node(L1,L2,n,9,i/L1,L2,x)
§1
**
handle_terminal_37(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> par const
    ↑(t≠1)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_38(L1,L2,L3,i,t,n/L1,L2,L3) *** EXPR -> at COMPLEXEXPR
**
handle_terminal_39(L1,L2,L3,i,t,n/L1,L2,L3) *** STAREXPR -> name ( CALLINARGS / CALLOUTARGS )
    ↑(t≠0)1
    *get_child_node_index(L1,L2,n,0/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§1
**
handle_terminal_40(L1,L2,L3,i,t,n/L1,L2,L3) *** STAREXPR -> OPERAND
**
handle_terminal_41(L1,L2,L3,i,t,n/L1,L2,L3) *** STAREXPR -> complex INDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_42(L1,L2,L3,i,t,n/L1,L2,L3) *** SLASHEXPR -> complex COMPLEXSLASHEXPR
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_43(L1,L2,L3,i,t,n/L1,L2,L3) *** SLASHEXPR -> string CONSOLEACTION console
    ↑(t≠0)1
    *get_child_node_index(L1,L2,n,0/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§1
**
handle_terminal_44(L1,L2,L3,i,t,n/L1,L2,L3) *** SLASHEXPR -> OPERAND
**
handle_terminal_45(L1,L2,L3,i,t,n/L1,L2,L3) *** COMPLEXSLASHEXPR -> CONSOLEACTION console
**
handle_terminal_46(L1,L2,L3,i,t,n/L1,L2,L3) *** COMPLEXSLASHEXPR -> INDEX
**
handle_terminal_47(L1,L2,L3,i,t,n/L1,L2,L3) *** COMPLEXEXPR -> + complex ( const )
    ↑(t≠1)1
    *get_child_node_index(L1,L2,n,0/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§1
    ↑(t≠3)2
    *get_child_node_index(L1,L2,n,1/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§2
**
handle_terminal_48(L1,L2,L3,i,t,n/L1,L2,L3) *** COMPLEXEXPR -> zeroing complex
    ↑(t≠1)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_49(L1,L2,L3,i,t,n/L1,L2,L3) *** COMPLEXEXPR -> string g complex
    ↑(t≠0)1
    *get_child_node_index(L1,L2,n,0/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§1
    ↑(t≠2)2
    *get_child_node_index(L1,L2,n,1/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§2
**
handle_terminal_50(L1,L2,L3,i,t,n/L1,L2,L3) *** SWAPEXPR -> id id
    *get_child_node_index(L1,L2,n,t/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
**
handle_terminal_51(L1,L2,L3,i,t,n/L1,L2,L3) *** SWAPEXPR -> complex SWAPFIRST SWAPSECOND
    ↑(t≠0)1
    *get_child_node_index(L1,L2,n,0/c)
    *get_node_info(L1,L2,c/j,v)
    *update_node_info(L1,L2,c,j,i/)
§1
**
handle_terminal_52(L1,L2,L3,i,t,n/L1,L2,L3) *** SWAPFIRST -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,6,i/)
§1
**
handle_terminal_53(L1,L2,L3,i,t,n/L1,L2,L3) *** SWAPFIRST -> . const
    ↑(t≠1)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,9,i/)
§1
**
handle_terminal_54(L1,L2,L3,i,t,n/L1,L2,L3) *** SWAPSECOND -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,6,i/)
§1
**
handle_terminal_55(L1,L2,L3,i,t,n/L1,L2,L3) *** SWAPSECOND -> const
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,9,i/)
§1
**
handle_terminal_56(L1,L2,L3,i,t,n/L1,L2,L3) *** CONSOLEACTION -> l
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_57(L1,L2,L3,i,t,n/L1,L2,L3) *** CONSOLEACTION -> g
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_58(L1,L2,L3,i,t,n/L1,L2,L3) *** JUMPOP -> jz
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_59(L1,L2,L3,i,t,n/L1,L2,L3) *** JUMPOP -> jnz
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_60(L1,L2,L3,i,t,n/L1,L2,L3) *** JUMPOP -> jump
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_61(L1,L2,L3,i,t,n/L1,L2,L3) *** INDEX -> . const
    ↑(t≠1)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_62(L1,L2,L3,i,t,n/L1,L2,L3) *** INDEX -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_63(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> +
**
handle_terminal_64(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> -
**
handle_terminal_65(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> ;
**
handle_terminal_66(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> and
**
handle_terminal_67(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> or
**
handle_terminal_68(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> xor
**
handle_terminal_69(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> g
**
handle_terminal_70(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOP -> l
**
handle_terminal_71(L1,L2,L3,i,t,n/L1,L2,L3) *** CONDITIONOP -> e
**
handle_terminal_72(L1,L2,L3,i,t,n/L1,L2,L3) *** CONDITIONOP -> ne
**
handle_terminal_73(L1,L2,L3,i,t,n/L1,L2,L3) *** CONDITIONOP -> g
**
handle_terminal_74(L1,L2,L3,i,t,n/L1,L2,L3) *** CONDITIONOP -> ge
**
handle_terminal_75(L1,L2,L3,i,t,n/L1,L2,L3) *** CONDITIONOP -> l
**
handle_terminal_76(L1,L2,L3,i,t,n/L1,L2,L3) *** CONDITIONOP -> le
**
handle_terminal_77(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_78(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> const
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_79(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> length
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_80(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> capacity
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_81(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> random
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_82(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> singleconst
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_83(L1,L2,L3,i,t,n/L1,L2,L3) *** OPERAND -> time
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_84(L1,L2,L3,i,t,n/L1,L2,L3) *** ASSIGNABLEOPERAND -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_85(L1,L2,L3,i,t,n/L1,L2,L3) *** ASSIGNABLEOPERAND -> complex INDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_86(L1,L2,L3,i,t,n/L1,L2,L3) *** ASSIGNABLEOPERAND -> length
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_87(L1,L2,L3,i,t,n/L1,L2,L3) *** ASSIGNABLEOPERAND -> random
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_88(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINARGS -> CALLINARG NEXTCALLINARG
**
handle_terminal_89(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINARGS -> ε
**
handle_terminal_90(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTCALLINARG -> , CALLINARG NEXTCALLINARG
**
handle_terminal_91(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTCALLINARG -> ε
**
handle_terminal_92(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINARG -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_93(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINARG -> const
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_94(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINARG -> complex CALLINDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_95(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLOUTARGS -> CALLOUTARG NEXTCALLOUTARG
**
handle_terminal_96(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLOUTARGS -> ε
**
handle_terminal_97(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTCALLOUTARG -> , CALLOUTARG NEXTCALLOUTARG
**
handle_terminal_98(L1,L2,L3,i,t,n/L1,L2,L3) *** NEXTCALLOUTARG -> ε
**
handle_terminal_99(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLOUTARG -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_100(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLOUTARG -> complex CALLINDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_101(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINDEX -> . const
    ↑(t≠1)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_102(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINDEX -> id
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_103(L1,L2,L3,i,t,n/L1,L2,L3) *** CALLINDEX -> ε
**
handle_terminal_104(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOPERAND -> OPERAND
**
handle_terminal_105(L1,L2,L3,i,t,n/L1,L2,L3) *** ARITHMETICOPERAND -> complex INDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_106(L1,L2,L3,i,t,n/L1,L2,L3) *** LEFTCONDITIONOPERAND -> OPERAND
**
handle_terminal_107(L1,L2,L3,i,t,n/L1,L2,L3) *** LEFTCONDITIONOPERAND -> complex INDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**
handle_terminal_108(L1,L2,L3,i,t,n/L1,L2,L3) *** RIGHTCONDITIONOPERAND -> OPERAND
**
handle_terminal_109(L1,L2,L3,i,t,n/L1,L2,L3) *** RIGHTCONDITIONOPERAND -> complex INDEX
    ↑(t≠0)1
    *get_node_info(L1,L2,n/j,v)
    *update_node_info(L1,L2,n,j,i/)
§1
**